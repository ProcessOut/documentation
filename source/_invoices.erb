## Invoices

ProcessOut gives you ability to programmatically create and manage invoices
compatible with all your payment gateways, in one simple call.

Invoices are the best way to perform simple, quick, **one-off payments**.


##### Attributes
|||
--:|:--
**id**<br />*string*<br />Read-only |
**url**<br />*string*<br />Read-only | `url` to the ProcessOut checkout page
**project**<br />*[Project](#projects)*<br />Read-only |
**customer**<br />*[Customer](#customers)*<br />Read-only |
**name**<br />*string*<br />Required | Name of the invoice/item to sell
**price**<br />*string*<br />Required | Price of the invoice/item
**taxes**<br />*string* | Taxes applied to the invoice/item
**shipping**<br />*string* | Shipping fees applied to the invoice/item
**total**<br />*string*<br />Read-only | Total amount of the invoice
**currency**<br />*string*<br />Required | Currency of the invoice, in the ISO 4217 format (ex: `USD`, `EUR`)
**metas**<br />*map/dictionary* | Meta data displayed on the checkout page
**request_email**<br />*boolean* | If set to `true`, a customer with an email will be required
**request_shipping**<br />*boolean* | If set to `true`, a customer with a shipping address will be required
**return_url**<br />*string* | `url` used to redirect the customer once the payment is placed
**cancel_url**<br />*string* | `url` used to redirect the customer when the payment is canceled |ProcessOut cancelation landing page
**custom**<br />*string* | Custom data passed in the [webhooks](#webhooks) (ex: id of the customer in your database)
**sandbox**<br />*boolean*<br />Read-only |

### Create an invoice

```javascript
// Create a new invoice
var invoice = new ProcessOut.Invoice();
invoice.setName('Amazing item');
invoice.setPrice(4.99);
invoice.setCurrency('USD');
// You may set any field listed in table on the right pane

// Push it to ProcessOut
// The ProcessOut NodeJS library uses promises to return objects
invoice.create().then(function(invoice) {
    // Print the id of the invoice to be used with the modal
    console.log(invoice.getId());
    // > 64db379a-301f-4db6-859e-a0b342ff0b66
    // or its checkout url
    console.log(invoice.getUrl());
    // > https://checkout.processout.com/64db379a-301f-4db6-859e-a0b342ff0b66

}, function(err) {
    // An error occured

});
```

```python
from processout.invoice import Invoice

# Create a new invoice
invoice          = Invoice()
invoice.name     = 'Amazing item'
invoice.price    = 4.99
invoice.currency = 'USD'
# You may set any field listed in table on the right pane

# Push it to ProcessOut. Create returns a new invoice instance
invoice = invoice.create()

# Print the id of the invoice to be used with the modal
print(invoice.id)
# > 64db379a-301f-4db6-859e-a0b342ff0b66
# or its checkout url
print(invoice.url)
# > https://checkout.processout.com/64db379a-301f-4db6-859e-a0b342ff0b66
```

```php
<?php
// Create a new invoice
$invoice = new \ProcessOut\Invoice();
$invoice
    ->setName('Amazing item')
    ->setPrice(4.99)
    ->setCurrency('USD');
// You may set any field listed in table on the right pane

// Push it to ProcessOut. Create returns a new invoice instance
$invoice = $invoice->create();

// Print the id of the invoice to be used with the modal
echo $invoice->getId();
// > 64db379a-301f-4db6-859e-a0b342ff0b66
// or its checkout url
echo $invoice->getUrl();
// > https://checkout.processout.com/64db379a-301f-4db6-859e-a0b342ff0b66
?>
```

```go
iv, err := p.Invoices.Create(&processout.Invoice{
	Name:     "Amazing item",
	Price:    "4.99",
	Currency: "USD",
})

// Print the ID of the invoice to be used with the modal
fmt.Println(iv.ID)

// Print the checkout URL
fmt.Println(iv.URL)
```

It is possible to dynamically create one-off payment invoices.

Once an invoice is created, its checkout URL `url` and unique identifier `id`
are returned. You may then choose to redirect your customer to our payment
page, or to use our [payment modal](#payment-modal).

#### What's next?

- [Accept recurring payments/subscriptions](#subscriptions)
- [Use the payment modal](#payment-modal)


### Find an invoice

```javascript
// Find an invoice
ProcessOut.Invoice.find('invoice-id').then(function(invoice) {
    // Print the id of the invoice to be used with the modal
    console.log(invoice.getId());
    // > 64db379a-301f-4db6-859e-a0b342ff0b66
    // or its checkout url
    console.log(invoice.getUrl());
    // > https://checkout.processout.com/64db379a-301f-4db6-859e-a0b342ff0b66
}, function(err) {
    // An error occured

});
```

```python
from processout.invoice import Invoice

# Find an invoice
invoice = Invoice.find('invoice-id')

# Print the id of the invoice to be used with the modal
print(invoice.id)
# > 64db379a-301f-4db6-859e-a0b342ff0b66
# or its checkout url
print(invoice.url)
# > https://checkout.processout.com/64db379a-301f-4db6-859e-a0b342ff0b66
```

```php
<?php
// Find an invoice
$invoice = \ProcessOut\Invoice::find('invoice-id');

// Print the id of the invoice to be used with the modal
echo $invoice->getId();
// > 64db379a-301f-4db6-859e-a0b342ff0b66
// or its checkout url
echo $invoice->getUrl();
// > https://checkout.processout.com/64db379a-301f-4db6-859e-a0b342ff0b66
?>
```

```go
iv, err := p.Invoices.Find("invoice-id")

// Print the checkout URL
fmt.Println(iv.URL)
```

It is also possible to find an invoice using its `id`.

##### Parameters
|||
--:|:--
**id**<br />*string* | ID of the invoice


### Transactions

Transactions are *read-only* objects linked to their corresponding [invoice](#invoices).
Compared to invoices, transactions are closely linked to the payment gateway
with which the invoice's customer interacted.

##### Attributes
|||
--:|:--
**id**<br />*string*<br />Read-only |
**status**<br />*string*<br />Read-only | [Status](#statuses) of the transaction
**processout_fee**<br />*string*<br />Read-only | Fee taken by ProcessOut to process the transaction
**gateway**<br />*map/dictionary*<br />Read-only | Contains information related to the transaction's gateway: `name`, `payment_id`, `fee` and `fee_currency`

As seen in the transaction's attributes, it also contains a `status`, representing
the latest known status of the transaction. This status is automatically updated
by ProcessOut when the payment gateway pushes an update.

##### Statuses
|||
--:|:--
**waiting** | No payment has been placed yet
**pending** | The payment is pending confirmation by the payment gateway
**completed** | The payment was sucessfully completed
**failed** | The payment has been placed, but failed
**disputed** | The payment was previously completed but the customer filled a dispute
**solved** | The previous dispute has been resolved in your favor
**reversed** | The previous dispute has been resolved in your customerâ€™s favor
**refunded** | You refunded the transaction
