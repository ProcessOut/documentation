# Invoices

Invoices are a quick way of generating a checkout for your customers.

Once an invoice is created, you will receive its checkout URL `url` as well as its unique identifier `id`. Simply redirect your customer to the `url` to perform the transaction, or create a new modal -- using our javascript library -- with the `id`.

## Create a new invoice

```shell
curl --user "<project-id>:<project-key>" \
     --request POST \
     --header "Content-Type: application/json" \
     --data-binary "{
        \"item_name\": \"Awesome item\",
        \"item_price\": 4.99,
        \"item_quantity\": 1,
        \"currency\": \"USD\",
        \"taxes\": 0.49,
        \"shipping\": 2.00,
        \"recurring_days\": 7,
        \"request_email\": false,
        \"request_shipping\": false,
        \"metas\": {
            \"key 1\": \"value 1\",
            \"key 2\": \"value 2\"
        },
        \"return_url\": \"https://company.tld/success\",
        \"cancel_url\": \"https://company.tld/cancel\",
        \"notify_url\": \"https://company.tld/webhook\",
        \"custom\": \"42\",
        \"sandbox\": 1
    }" \
    <%= api_link '/invoices' %>

# Happy response (200):
{
  "success": true,
  "id": "<invoice-id>",
  "url": "https://checkout.processout.com/index/<invoice-id>"
}
```

```javascript
// Let's assume processout has previously been instantiated

// Create a new invoice
var invoice       = new ProcessOut.Invoice(processout);
invoice.itemName  = 'Amazing item';
invoice.itemPrice = 4.99;
invoice.currency  = USD;
// And save it onto ProcessOut's servers
invoice.save()
```

```php
<?php
// Let's assume $processout has previously been instantiated

// Create a new invoice
$invoice = new \ProcessOut\Invoice\Invoice($processout);
$invoice->setItemName('Amazing item')->setItemPrice(4.99)->setCurrency('USD');
// And save it onto ProcessOut's servers
$invoice->save();
?>
```

```python
# Let's assume processout has previously been instantiated

# Create a new invoice
invoice           = Invoice(processout)
invoice.itemName  = 'Amazing item'
invoice.itemPrice = 4.99
invoice.currency  = 'USD'

# And save it onto ProcessOut's servers
invoice.save()
```

```csharp
// Let's assume MyProcessOut has previously been instantiated

// Creating a new invoice
var Invoice = new ProcessOut.Invoice.Invoice(MyProcessOut);
Invoice.ItemName = "Amazing item";
Invoice.ItemPrice = 4.99m;
Invoice.Currency = "USD";

// Saving it onto ProcessOut's servers
Invoice.Save();
```

Create an invoice.

Adding the `recurring_days` field enables you to automatically charge a user every `x` days. Every payment iteration will automatically be managed by ProcessOut.

### HTTP request

`POST <%= api_link('/invoices') %>`

## Create from a tailored invoice

```shell
curl --user "<project-id>:<project-key>" \
     --request POST \
     --header "Content-Type: application/json" \
     --data-binary "{
        \"return_url\": \"https://company.tld/success\",
        \"cancel_url\": \"https://company.tld/cancel\",
        \"notify_url\": \"https://company.tld/webhook\",
        \"custom\": \"my_customer_id=1\",
        \"sandbox\": 1
    }" \
    <%= api_link '/invoices/from-tailored/<tailored-invoice-id>' %>

# Happy response (200):
{
  "success": true,
  "id": "<invoice-id>",
  "url": "https://checkout.processout.com/index/<invoice-id>"
}
```

```javascript
// Let's assume processout has previously been instantiated

// Create a new tailored invoice instance
var tailored = new ProcessOut.TailoredInvoice(processout);
// Pull its data from ProcessOut
tailored.from('1ca570ac-0cb4-4c54-8ff2-f7c82f4fb12b').then(
    function(tailored) {
        // We successfully pulled the tailored invoice
        // data from ProcessOut
        var invoice = tailored.invoice();
        // invoice is now a new invoice loaded from the
        // tailored invoice data
        invoice.save();
    }, function(err) {
        // An error occured
        console.log(err);
    });
```

```php
<?php
// Let's assume processout has previously been instantiated

// Create a new tailored invoice instance
$tailored = new \ProcessOut\Invoice\TailoredInvoice($processout);
// Pull its data from ProcessOut and create a new invoice from it
$invoice = $tailored->from('1ca570ac-0cb4-4c54-8ff2-f7c82f4fb12b')->invoice();
// $invoice is now a new invoice loaded from the tailored invoice data
$invoice->save();
?>
```

```python
# Let's assume processout has previously been instantiated

# Create a new tailored invoice instance
tailored = TailoredInvoice(processout)
# Pull its data from ProcessOut
invoice = tailored.fromId('1ca570ac-0cb4-4c54-8ff2-f7c82f4fb12b').invoice()
# invoice is now a new invoice loaded form the tailored invoice data
invoice.save()
```

```csharp
// Let's assume MyProcessOut and Invoice have previously been instantiated

// Creating a new tailored invoice
var Tailored = new ProcessOut.Invoice.TailoredInvoice(MyProcessOut);

// Filling it with data from ProcessOut
Tailored.From("1ca570ac-0cb4-4c54-8ff2-f7c82f4fb12b");

// Turning it into a normal invoice
Invoice = Tailored.Invoice();

/* You can make modifications if you desire here */

// Saving it into ProcessOut's servers
Invoice.Save();
```

> Make sure to replace `<tailored-invoice-id>` with your tailored invoice id.

`Tailored invoices` are invoices which can be stored in your ProcessOut account
and used as a template for new invoices, in which you can set default values for
fields of your choosing.

It is possible to create invoices from these tailored invoices using our API.

### HTTP request

`POST <%= api_link('/invoices/form-tailored/<tailored-invoice-id>') %>`

### URL Parameters

Parameter | Description
--------- | -----------
tailored-invoice-id | The ID of the tailored invoice

## Get invoice attributes

```shell
# There is no shell library
```

```javascript
// Let's assume invoice has previously been instantiated

console.log(invoice.itemName);
console.log(invoice.itemPrice);
console.log(invoice.itemQuantity);
console.log(invoice.currency);
console.log(invoice.taxes);
console.log(invoice.shipping);
console.log(invoice.recurringDays);

console.log(invoice.requestEmail);
console.log(invoice.requestShipping);

console.log(invoice.metas);

console.log(invoice.returnUrl);
console.log(invoice.cancelUrl);
console.log(invoice.notifyUrl);
console.log(invoice.custom);
console.log(invoice.sandbox);
```

```php
<?php
// Let's assume $invoice has previously been instantiated

echo $invoice->getItemName();
echo $invoice->getItemPrice();
echo $invoice->getItemQuantity();
echo $invoice->getCurrency();
echo $invoice->getTaxes();
echo $invoice->getShipping();
echo $invoice->getRecurringDays();

echo $invoice->getRequestEmail();
echo $invoice->getRequestShipping();

echo $invoice->getMetas();

echo $invoice->getReturnUrl();
echo $invoice->getCancelUrl();
echo $invoice->getNotifyUrl();
echo $invoice->getCustom();
echo $invoice->getSandbox();
?>
```

```python
# Let's assume invoice has previously been instantiated

print (invoice.itemName)
print (invoice.itemPrice)
print (invoice.itemQuantity)
print (invoice.currency)
print (invoice.taxes)
print (invoice.shipping)
print (invoice.recurringDays)

print (invoice.requestEmail)
print (invoice.requestShipping)

print (invoice.metas)

print (invoice.returnUrl)
print (invoice.cancelUrl)
print (invoice.notifyUrl)
print (invoice.custom)
print (invoice.sandbox)
```

```csharp
# Let's assume Invoice has previously been instantiated

Console.WriteLine(Invoice.ItemName);
Console.WriteLine(Invoice.ItemPrice);
Console.WriteLine(Invoice.ItemQuantity);
Console.WriteLine(Invoice.Currency);
Console.WriteLine(Invoice.Taxes);
Console.WriteLine(Invoice.Shipping);
Console.WriteLine(Invoice.RecurringDays);

Console.WriteLine(Invoice.RequestEmail);
Console.WriteLine(Invoice.RequestShipping);

Console.WriteLine(Invoice.Meta);

Console.WriteLine(Invoice.ReturnURL);
Console.WriteLine(Invoice.CancelURL);
Console.WriteLine(Invoice.NotifyURL);
Console.WriteLine(Invoice.Sandbox);
```

Once an invoice instance has been created, you might need to access its
attributes.

## Set invoice attributes

Once an invoice instance has been created, you might need to set or update its
attributes.

```shell
# There is no shell library
```

```javascript
// Let's assume invoice has previously been instantiated

invoice.itemName      = 'new name';
invoice.itemPrice     = 4.20;
invoice.itemQuantity  = 4;
invoice.currency      = 'EUR';
invoice.taxes         = 4.20;
invoice.shipping      = 4.20;
invoice.recurringDays = 7;

invoice.requestEmail    = true;
invoice.requestShipping = true;

invoice.metas = {
    'key 1': 'value 1',
    'key 2': 'value 2'
};

invoice.returnUrl = 'http(s)://your.site/return';
invoice.cancelUrl = 'http(s)://your.site/cancel';
invoice.notifyUrl = 'http(s)://your.site/webhook';
invoice.sandbox   = true;
```

```php
<?php
// Let's assume $invoice has previously been instantiated

$invoice->setItemName('new name');
$invoice->setItemPrice(4.20);
$invoice->setItemQuantity(4);
$invoice->setCurrency('EUR');
$invoice->setTaxes(4.20);
$invoice->setShipping(4.20);
$invoice->setRecurringDays(7);

$invoice->setRequestEmail(true);
$invoice->setRequestShipping(true);

$invoice->setMetas(array(
    'key 1' => 'value 1',
    'key 2' => 'value 2'
));

$invoice->setReturnUrl('http(s)://your.site/return');
$invoice->setCancelUrl('http(s)://your.site/cancel');
$invoice->setNotifyUrl('http(s)://your.site/webhook');
$invoice->setCustom('my_customer_id=1');
$invoice->setSandbox(true);
?>
```

```python
# Let's assume invoice has previously been instantiated

invoice.itemName      = 'new name'
invoice.itemPrice     = 4.20
invoice.itemQuantity  = 4
invoice.currency      = 'EUR'
invoice.taxes         = 4.20
invoice.shipping      = 4.20
invoice.recurringDays = 7

invoice.requestEmail    = True
invoice.requestShipping = True

invoice.metas = {
    "key 1": "value 1",
    "key 2": "value 2"
}

invoice.returnUrl = 'http(s)://your.site/return'
invoice.cancelUrl = 'http(s)://your.site/cancel'
invoice.notifyUrl = 'http(s)://your.site/webhook'
invoice.custom    = 'my_customer_id=1'
invoice.sandbox   = true
```

```csharp
// Let's assume Invoice has previously been instantiated

Invoice.ItemName      = "new name";
Invoice.ItemPrice     = 4.20m;
Invoice.ItemQuantity  = 4;
Invoice.Currency      = "EUR";
Invoice.Taxes         = 4.20m;
Invoice.Shipping      = 4.20m;
Invoice.RecurringDays = 7;

Invoice.RequestEmail    = true;
Invoice.RequestShipping = true;

Invoice.Meta = new Dictionary<string, string>();
Invoice.Meta.Add("key 1", "value 1");
Invoice.Meta.Add("Key 2", "value 2");

Invoice.returnUrl = "http(s)://your.site/return";
Invoice.CancelUrl = "http(s)://your.site/cancel";
Invoice.NotifyUrl = "http(s)://your.site/webhook";
Invoice.Sandbox   = true;
```

## Redirect customer to checkout

```shell
# Use the url field returned in the response
```

```javascript
// Because http requests made using the ProcessOut's nodejs library are
// asyncronous, you need to use promises in order to listen for when the
// data will actually be available in the object
invoice.save().then(
    function(invoice) {
       console.log('Link: ' + invoice.url);
       // You may also get the invoice id
       console.log('Id: ' + invoice.id);
    }, function(err) {
        // Oops, an error occured
        console.log(err);
    });
```

```php
<?php
// Let's assume $invoice has previously been instantiated
// and saved

echo 'Link: ' . $invoice->getUrl();
// You may also only get the invoice id
echo 'Id: ' . $invoice->getId();
?>
```

```python
# Let's assume invoice has previously been instantiated
# and saved

print ('Link: ' + invoice.getUrl())
# You may also only get the invoice id
print ('Id: ' + invoice.getId())
```

```csharp
// Let's assume Invoice has previously been instantiated
// and saved

Console.WriteLine("Link: "
          + Invoice.URL);
          
// You may also get the invoice's ID
Console.WriteLine("ID: "
          + Invoice.ID);
```

Once an invoice is created, it is possible to redirect the customer to the
checkout page.

## Modals / Self hosted checkout

```html
<a class="processout-modal-button"
    data-invoiceid="<invoice-id>"
    href="https://checkout.processout.com/<invoice-id>">
        Test modal
</a>
<script src="https://cdn.processout.com/scripts/modal-min.js"></script>
```

> Make sure to replace `<invoice-id>` with your invoice id.
> You may also use a tailored invoice id.

```html
<a class="processout-modal-button"
    data-tailored-invoiceid="<tailored-invoice-id>"
    href="https://checkout.processout.com/<tailored-invoice-id>">
        Test modal
</a>
<script src="https://cdn.processout.com/scripts/modal-min.js"></script>
```

ProcessOut allows its users to directly host their checkout pages on their
websites or applications. Most of the time, this is done using a modal.

<a class="processout-modal-button"
    data-tailored-invoiceid="1708648b-e753-4015-864f-9bee7cc18a19"
    href="https://checkout.processout.com/1708648b-e753-4015-864f-9bee7cc18a19/c/tailored-invoice">
        Test modal
</a>
<script src="https://cdn.processout.com/scripts/modal-min.js"></script>
