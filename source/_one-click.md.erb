## One-click payments

Very often, merchants want to store their customers' payment details, such
as their credit card, to be able to charge them later, a bit like *Uber* does.
Doing so is especially useful for *Software as a Service* companies,
where they need to charge their users based on their usage of the service.
ProcessOut provides an easy of doing so, while removing all the PCI-DSS compliancy
and payment gateway mangement nightmare thanks to [one-click tokens](#one-click-tokens).


### Authorizations

Authorizations can be seen as one-click payment requests made to your customer.
Once created, the customer can then be redirected to the ProcessOut authorization
page where he will be prompted to authorize using one of your payment gateways
(Credit Cards, PayPal, SEPA, ...).

Once the authorization is completed, we'll send you an [event](#events)
(or [webhook](#webhooks)) containing the newly created [one-click token](#one-click-tokens).

##### Attributes
|||
--:|:--
**id**<br />*string*<br />Read-only |
**url**<br />*string*<br />Read-only | `url` to the ProcessOut authorization page
**project**<br />*[Project](#projects)*<br />Read-only |
**customer**<br />*[Customer](#customers)*<br />Read-only |
**currency**<br />*string*<br />Required | Currency of the authorization, in the ISO 4217 format (ex: `USD`, `EUR`)
**name**<br />*string* | Name given to the authorization, displayed on the authorization page
**return_url**<br />*string* | `url` used to redirect the customer once the authorization is placed
**cancel_url**<br />*string* | `url` used to redirect the customer when the authorization is canceled |ProcessOut cancelation landing page
**sandbox**<br />*boolean*<br />Read-only |

### Create an authorization

```javascript
// Create a new authorization
var authorization = new ProcessOut.Authorization();
authorization.setName('Amazing authorization');
authorization.setCurrency('USD');
// You may set any field listed in table on the right pane

// Push it to ProcessOut
// The ProcessOut NodeJS library uses promises to return objects
authorization.create().then(function(authorization) {
    // Print the id of the invoice to be used with the modal
    console.log(authorization.getId());
    // > 64db379a-301f-4db6-859e-a0b342ff0b66
    // or its checkout url
    console.log(authorization.getUrl());
    // > https://checkout.processout.com/authorizations/64db379a-301f-4db6-859e-a0b342ff0b66

}, function(err) {
    // An error occured

});
```

```python
from processout.authorization import Authorization

# Create a new authorization
authorization          = Authorization()
authorization.name     = 'Amazing authorization'
authorization.currency = 'USD'
# You may set any field listed in table on the right pane

# Push it to ProcessOut. Create returns a new authorization instance
authorization = authorization.create()

# Print the id of the authorization to be used with the modal
print(authorization.id)
# > 64db379a-301f-4db6-859e-a0b342ff0b66
# or its authorization url
print(authorization.url)
# > https://checkout.processout.com/authorizations/64db379a-301f-4db6-859e-a0b342ff0b66
```

```php
<?php
// Create a new authorization
$authorization = new \ProcessOut\Authorization();
$authorization
    ->setName('Amazing authorization')
    ->setCurrency('USD');
// You may set any field listed in table on the right pane

// Push it to ProcessOut. Create returns a new authorization instance
$authorization = $authorization->create();

// Print the id of the authorization to be used with the modal
echo $authorization->getId();
// > 64db379a-301f-4db6-859e-a0b342ff0b66
// or its authorization url
echo $authorization->getUrl();
// > https://checkout.processout.com/authorization/64db379a-301f-4db6-859e-a0b342ff0b66
?>
```

```go

```

Once the customer authorized the merchant to perform one-click payments,
a `customer.token.authorized` [event](#events) will be created so the merchant
can retrieve the newly created [token](#one-click-tokens).

The usage of the created token will be the same across every gateway. ProcessOut
entirely *abstracts* its usage so it's easier for you to charge your customers
using different payment gateways.

#### What's next?

- [Receive the token through webhooks](#webhooks)
- [Charge a customer using the token](#charge-a-token)


### One-click tokens

One-click token objects represent the abstraction of the token and the payment
gateway it is linked to. For the merchant, charging a one-click token will also
be done in the same way, no matter what payment gateway is used in the background.

##### Attributes
|||
--:|:--
**id**<br />*string*<br />Read-only |
**name**<br />*string* | Name given to the token
**customer**<br />*[Customer](#customers)*<br />Read-only |
**gateway**<br />*string*<br />Read-only | Payment gateway to which the token is linked
**recurring**<br />*boolean*<br />Read-only | Defines if the token is assigned to a recurring invoice. If it is, it may not be used for one-click payments.


### Find a token

```javascript
// Find a token
var token = ProcessOut.CustomerToken.find('token-id');
```

```python
from processout.customertoken import CustomerToken

# Find a token
token = CustomerToken.find('token-id')
```

```php
<?php
// Find a token
$token = \ProcessOut\CustomerToken::find('token-id');
?>
```

```go

```

Finds a token by its `id`.

If a token corresponding to the given `id` is found, a new customer token object
is returned.

##### Parameters
|||
--:|:--
**id**<br />*string* | ID of the token

### Charge a token

```javascript
// Find an invoice
var invoice = ProcessOut.Invoice.find('invoice-id');

// Charge the invoice using the token
var success = invoice.chargeWithToken('token-id');
```

```python
from processout.invoice import Invoice

# Find an invoice
invoice = Invoice.find('invoice-id')

# Charge the invoice using the token
success = invoice.chargeWithToken('token-id')
```

```php
<?php
// Find an invoice
$invoice = \ProcessOut\Invoice::find('invoice-id');

// Charge the invoice using the token
$success = $invoice->chargeWithToken('token-id');
?>
```

```go

```

Tokens can be applied on [invoices](#invoices) in order to automatically charge
them.

If the charge is successful, a `invoice.transaction.completed` [event](#events)
will be created.

##### Parameters
|||
--:|:--
**id**<br />*string* | ID of the token

### Delete a token

```javascript
// Find a token
var token = ProcessOut.CustomerToken.find('token-id');

// Delete the token
token.delete();
```

```python
from processout.customertoken import CustomerToken

# Find a token
token = CustomerToken.find('token-id')

# Delete the token
token.delete()
```

```php
<?php
// Find a token
$token = \ProcessOut\CustomerToken::find('token-id');

// Delete the token
$token->delete();
?>
```

```go

```

Deletes a token.

Once a token is deleted, all data associated with it will be deleted as well.
**This can't be undone.**
