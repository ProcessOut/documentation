## Subscriptions

Recurring invoices, or subscriptions, are a great way to get recurring income from your customers,
with a high conversion rate. Because of how payment gateways differently handle
this type of payment, ProcessOut will try to make most of the features offered
by them.

At each payment iteration, a new [invoice](#invoices) will be created and marked
as paid, when successful. Both an `invoice.transaction.completed` and
`customer.recurring-invoice.iterated` [event](#events) will therefore be sent.

Keep in mind that when using recurring invoices, you will not be able to change
the amount nor the frequency of the charges once the subscription has started.
If this is something that you want, if you run a *Software as a Service* for
instance, our [one-click payment/authorization](#one-click-payments) technology
would better suit your needs.

##### Attributes
|||
--:|:--
**id**<br />*string*<br />Read-only |
**url**<br />*string*<br />Read-only | `url` to the ProcessOut checkout page
**project**<br />*[Project](#projects)*<br />Read-only |
**customer**<br />*[Customer](#customers)*<br />Read-only |
**name**<br />*string*<br />Required | Name of the recurring invoice/item to sell
**price**<br />*string*<br />Required | Price of the invoice/item
**taxes**<br />*string* | Taxes applied to the invoice/item
**shipping**<br />*string* | Shipping fees applied to the invoice/item
**currency**<br />*string*<br />Required | Currency of the recurring invoice, in the ISO 4217 format (ex: `USD`, `EUR`)
**recurring_days**<br />*integer*<br />Required | Number of days for the recurring period
**trial_days**<br />*integer* | Number of days for the trial period, before which the customer won't pay. Defaults to `0`
**return_url**<br />*string* | `url` used to redirect the customer once the payment is placed
**cancel_url**<br />*string* | `url` used to redirect the customer when the payment is canceled |ProcessOut cancelation landing page
**ended**<br />*boolean* |
**ended_reason**<br />*boolean* | If `ended` is true, represents the reason why the recurring invoice was ended
**custom**<br />*string* | Custom data passed in the [webhooks](#webhooks) (ex: id of the customer in your database)
**sandbox**<br />*boolean*<br />Read-only |

### Create a subscription

```javascript
// Create a new recurring invoice
var recurringInvoice      = new ProcessOut.RecurringInvoice();
recurringInvoice.setName('Amazing item');
recurringInvoice.setPrice(4.99);
recurringInvoice.setCurrency('USD');
// Set the recurring period to a month
recurringInvoice.setRecurringDays(30);
// You may set any field listed in table on the right pane

// Push it to ProcessOut. You will need the customer ID of a previously
// generated customer
recurringInvoice.create(customerID).then(function(recurringInvoice) {
    // Print the id of the recurring invoice to be used with the modal
    console.log(recurringInvoice.getId());
    // > 64db379a-301f-4db6-859e-a0b342ff0b66
    // or its checkout url
    console.log(recurringInvoice.getUrl());
    // > https://checkout.processout.com/64db379a-301f-4db6-859e-a0b342ff0b66

}, function(err) {
    // An error occured

});
```

```python
from processout.recurringinvoice import RecurringInvoice

# Create a new recurring invoice object
recurringInvoice          = RecurringInvoice()
recurringInvoice.name     = 'Amazing item'
recurringInvoice.price    = 4.99
recurringInvoice.currency = 'USD'
# Set the recurring period to a month
recurringInvoice.recurringDays = 30
# You may set any field listed in table on the right pane

# Push it to ProcessOut. Create returns a new recurring invoice instance
# You will need the customer ID of a previously generated customer
recurringInvoice = recurringInvoice.create(customerID)

# Print the id of the recurring invoice to be used with the modal
print(recurringInvoice.id)
# or its checkout url
# > 64db379a-301f-4db6-859e-a0b342ff0b66
print(recurringInvoice.url)
# > https://checkout.processout.com/64db379a-301f-4db6-859e-a0b342ff0b66
```

```php
<?php
// Create a new recurring invoice
$recurringInvoice = new \ProcessOut\RecurringInvoice();
$recurringInvoice
    ->setName('Amazing item')
    ->setPrice(4.99)
    ->setCurrency('USD')
    // Set the recurring period to a month
    ->setRecurringDays(30);
// You may set any field listed in table on the right pane

// Push it to ProcessOut. Create returns a new recurring invoice instance
// You will need the customer ID of a previously generated customer
$recurringInvoice = $recurringInvoice->create(customerID);

// Print the id of the recurring invoice to be used with the modal
echo $recurringInvoice->getId();
// > 64db379a-301f-4db6-859e-a0b342ff0b66
// or its checkout url
echo $recurringInvoice->getUrl();
// > https://checkout.processout.com/64db379a-301f-4db6-859e-a0b342ff0b66
?>
```

```go

```

Create a recurring invoice.
The field `recurring_days` must be set to the number of days you wish your
recurring period to last.

Once the recurring payment is created, you may use our [payment modal](#payment-modal)
to keep your customer on your website instead of redirecting it to our checkout page.

#### What's next?

- [Find a subscription](#find-a-subscription)
- [Cancel a subscription](#cancel-a-subscription)
- [One-click payments](#one-click-payments)
- [Use the payment modal](#payment-modal)

### Find a subscription

```javascript
// Find a recurring invoice from its id
ProcessOut.RecurringInvoice.find('recurring-invoice-id').then(function(recurringInvoice) {
    // You may now access the fetched recurringInvoice

}, function(err) {
    // An error occured

});
```

```python
from processout.recurringinvoice import RecurringInvoice

# Find a recurring invoice from its id
recurringInvoice = RecurringInvoice.find('recurring-invoice-id')
```

```php
<?php
// Find a recurring invoice from its id
$recurringInvoice = \ProcessOut\RecurringInvoice::find('recurring-invoice-id');
?>
```

```go

```

Find a subscription by its `id`.

If a subscription corresponding to the `id` is found, a new subscription object
is returned.

##### Parameters
|||
--:|:--
**id**<br />*string* | ID of the subscription/recurring invoice


### Cancel a subscription

```javascript
// Find a recurring invoice from its id
ProcessOut.RecurringInvoice.find('recurring-invoice-id').then(function(recurringInvoice) {
    // Ending the recurring invoice with a reason
    recurringInvoice.end('Reason goes here').then(function(success) {
        // Successfully ended

    }, function(err) {
        // Could not end it

    });
}, function(err) {
    // An error occured

});
```

```python
from processout.recurringinvoice import RecurringInvoice

# Find a recurring invoice from its id
recurringInvoice = RecurringInvoice.find('recurring-invoice-id')
# Ending the recurring invoice with a reason
success = recurringInvoice.end('Reason goes here');
```

```php
<?php
// Find a recurring invoice from its id
$recurringInvoice = \ProcessOut\RecurringInvoice::find('recurring-invoice-id');
// Ending the recurring invoice with a reason
$success = $recurringInvoice.end('Reason goes here');
?>
```

```go

```

Once a subscription is created, you might want to stop or cancel it. ProcessOut
makes it very easy and abstract away all the complexity linked to the payment
gateway used by your customer when setting up the subscription.

A `ended_reason` may also be specified when ending/canceling a subscription,
for later reference.
