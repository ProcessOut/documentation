# Webhooks

Processing [events](#events) can also be done through webhooks (also called
callbacks or Instant Payment Notification: IPN). It is essentially a web
request made to your web application, posting the data related to the event.
Webhooks can be very useful to automatically deliver an item upon successful
payment, for instance, without the need for an application running in the
background.

However, as a lot of payment gateways may be used at the same time, ProcessOut
provides webhooks containing unified, normalized and easy to use data, as well
as transaction states corresponding to the triggered event.

## Pre-requisites

```javascript
// Let's assume invoice has previously been instantiated
invoice.notifyUrl = 'http(s)://your.site/webhook';
```

```python
# Let's assume invoice has previously been instantiated
invoice.notifyUrl = 'http(s)://your.site/webhook'
```

```php
<?php
// Let's assume $invoice has previously been instantiated
$invoice->setNotifyUrl('http(s)://your.site/webhook');
?>
```

The URL to which ProcessOut will post webhooks has to be specified in the
`notify_url` field that you post to ProcessOut when creating an
[invoice](#invoice), or a [recurring invoice](#recurring-payment). By default,
this field will be empty, and the webhook will therefore never be sent.

You should also note that **we will always `POST` a json encoded body request**
to your application. Therefore, you should accept POST requests with a json body.

Furthermore, you should **remove all CSRF protection** on the URL you provide
using `notify_url`. Most frameworks and CMS activate it by default, which could
prevent ProcessOut from correctly posting webhooks to your application.


## Usage

```javascript
// Let's assume req is filled with the decoded json data from the request body

// We first need to check that the callback is coming from ProcessOut
var callback = new ProcessOut.Callback();
if (! callback.validate(req['transaction_id'], req['hmac_signature'])) {
    console.log('Bad webhook');
    return;
}

// Then make sure the event isn't coming from the sandbox (if in production)
if ('sandbox' in req && req['sandbox']) {
    console.log('Not in sandbox env');
    return;
}

// Webhook is legit! Perform actions on it
// /!\ Be sure to still check the price, currencies... /!\
switch (input['action']) {
case 'invoice.completed':
    // Transaction successful
    break;
case 'invoice.pending':
    // Transaction still needs some time to be processed
    break;
// ...
default:
    console.log('Unknown webhook action');
    return;
}
```

```python
from processout.callback import Callback

# Let's assume req is filled with the decoded json data from the request body

# We first need to check that the webhook is coming from ProcessOut
callback = Callback()
if not callback.validate(req['transaction_id'], req['hmac_signature']):
    print ('Bad webhook')
    return

# Webhook is legit! Perform actions on it
# /!\ Be sure to still check the amount, currencies... /!\
if req['action'] == 'invoice.completed':
    # Transaction successful
    pass

elif req['action'] == 'invoice.pending':
    # Transaction still needs some time to be processed
    pass

# ...

else:
    # Shouldn't be here..
    print('Unknown webhook action')
```

```php
<?php
$req = json_decode(file_get_contents('php://input'), true);

// We first need to check that the callback is coming from ProcessOut
$callback = new \ProcessOut\Callback();
if (! $callback->validate($req))
{
    echo 'Bad webhook'; exit();
}

// Then make sure the event isn't coming from the sandbox (if in production)
if (! empty($req['sandbox']) && $req['sandbox']) {
    echo 'Not in sandbox env'; exit();
}

// Webhook is legit! Perform actions on it
// /!\ Be sure to still check the price, currencies... /!\
switch($req['action'])
{
case 'invoice.completed':
    // Transaction successful
    break;
case 'invoice.pending':
    // Transaction still needs some time to be processed
    break;
// ...
default:
    echo 'Unknown webhook action'; exit();
}
?>
```

Now that your webhook is correctly set up, we need to make sure it is correctly
processed by your application.

You may notice that we actually send the name of the event under the `action`
field. Learn more about it [here](#invoice-events) and
[here](#recurring-invoice-events).

You should also make sure that when deployed on your production environment,
you do not accept sandbox webhooks anymore.

<aside class="notice">
Once correctly processed by your application, you should always return a
<strong>status 200 response</strong>. If you don't, ProcessOut will try to send the webhook
again, waiting an increasing amount of time between each tries.
</aside>
