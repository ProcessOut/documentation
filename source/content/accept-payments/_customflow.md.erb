## Custom flow

In addition to [hosted payment pages](#hosted-payment-page), <span class="processout">ProcessOut</span>
provides merchants with a way to tokenize credit cards directly from their websites
so the whole checkout process stays fully customizable.

### ProcessOut.js

On top of providing a payment modal, [processout.js](github.com/processout/processout.js)
lets merchants have a complete control over their payment flow when coupled
with the ProcessOut API.

<div></div>
#### Fetch credit card gateway configurations

```javascript
// Fetch the project
ProcessOut.Project.Find("<project-id>").then(function(project) {
    project.GatewayConfiguration({
        expand: ["gateway"], 
        filter: "flow: one-off type: credit-card"
    }).then(function(gateways) {
        // gateways contain the list of all the credit card providers
        // available for one-off payments on the current project

    }, function(err) {
        // An error occured

    });

}, function(err) {
    // An error occured

});
```

```python
from processout.project import Project

# Fetch the project
project = Project.find("<project-id>")

# And the gateway configurations of the project available for
# one-off credit card payments
gateways = project.gatewayConfigurations({
    expand: ["gateway"],
    filter: "flow: one-off type: credit-card"
})
```

```php
<?php
// Fetch the project
$project = \ProcessOut\Project::find("<project-id>");

// And the gateway configurations of the project available for
// one-off credit card payments
$gateways = $project->gatewayConfigurations(array(
    "expand" => array("gateway"),
    "filter" => "flow: one-off type: credit-card"
));
```

```go
gateways, erri := p.Projects.GatewayConfigurations(&processout.Project{
	ID: "<project-id>",
}, processout.Options{
	Expand: []string{"gateway"},
    Filter: "flow: one-off type: credit-card",
})
```

Prior to using ProcessOut.js, you must fetch the available gateway configurations
from the ProcessOut API. This lets you be extremely flexible in the future as no
code change will be needed to change from one payment gateway to the other.
This also lets <span class="processout">ProcessOut</span> smartly route
the transactions to the best payment provider available.

<div></div>
#### Set up ProcessOut.js

```html
<head>
    <script type="text/javascript"
        src="https://js.processout.com/processout.js"></script>
    <script type="text/javascript">
        // We want to make sure the DOM is fully loaded before
        // instanciating ProcessOut.js
        document.addEventListener("DOMContentLoaded", entrypoint);

        var entrypoint = function() {
            // Let's create a processout instance with the resource
            // we want to interact with. Here, let's say it's an
            // invoice we previously created
            var processout = new ProcessOut.ProcessOut("<invoice-id>");
            // Gateways can be directly injected into the template like so
            processout.setGateways("<gateway-list>");

            // processout is now ready to use!
        };
    </script>
</head>
```

> Replace `<project-id>` with the project ID
> and `<gateway-list>` with the json encoded gateway list you just fetched
> from the API.

The payment gateways may then be directly injected inside your javascript as json.
ProcessOut.js will understand that the configurations are coming from the API
and will automatically set itself up to handle credit cards.

<div></div>
#### Tokenize

```html
<script type="text/javascript">
// Let's assume we already intanciated ProcessOut.js in the variable
// processout
// This example uses jQuery only for conveniency, but ProcessOut.js
// has no external dependencies and can be used with vanilla Javascript
$(function() {
    $('#payment-form').submit(function(event) {
        // ProcessOut.js offers an easy way to validate the card fields
        var card = new ProcessOut.Card(
            $("#card-number").val(),
            ProcessOut.Expiry.parse($("#card-expiry").val()),
            $("#card-cvc").val()
        );
        var err = card.validate();
        if (err) {
            // Display the error. err is the error code, so we want to
            // translate it to a human-readable error messages
            alert(ProcessOut.Translator.translate(err));
            return false;
        }

        // Tokenize the card. ProcessOut will smartly select the best
        // matching payment gateway to ensure a successful tokenization
        processout.tokenize(card, yourSuccessHandler, yourErrorHandler);

        // Prevent the form from being submitted:
        return false;
    });
});
</script>
<form action="/your-endpoint" method="post" id="payment-form">
    <input type="text" placeholder="1234 1234 1234 1234" id="card-number" pattern="[0-9.]+">
    <input type="text" placeholder="Expiry" id="card-expiry">
    <input type="text" placeholder="CVC" id="card-cvc" pattern="[0-9.]+">
</form>
```

ProcessOut.js lets you tokenize credit cards directly from your website, which
can later be used to either capture a payment or authorize a new subscription.

Your own credit card fields can be used and customized.

ProcessOut.js also provides convenient helpers to build your checkout 
experience.

#### Credit card validation

When the customer submits its credit card, it might be useful to validate
its data is potentially correct. ProcessOut.js exposes a Card object
with a `validate` method which can be used to do this validation before the 
card gets tokenized. The validation checks the date, credit card number and
CVC code.

#### Error messages

When an error occures or a validation error arises, ProcessOut.js will return
an error code which can then be translated using `ProcessOut.Translator.translate("<code>");`

##### What's next

Now that we can tokenize our customers' credit cards, we need to be able to
charge them. This can be done through our [Authorization &amp; Capture flow](#authorize-&-capture).

### Authorize &amp; Capture

```javascript
// req is filled with the decoded json data from the request body
// and invoice is our previously created invoice that we used
// to create the token
invoice.capture(req["token"]).then(function(ok) {
    // All good! The capture was successfully captured
    // In rare cases, the capture may still be pending when 
    // reaching this point. For this reason, it is highly 
    // advised to rely on webhooks to be notified when a payment 
    // has fully been captured

}, function(err) {
    // An error occured trying to capture the payment

});
```

```python
# req is filled with the decoded josn data from the request body
# and invoice is our previously created invoice that we used 
# to create the token
invoice.capture(req["token"])

# All good! The capture was successfully captured
# In rare cases, the capture may still be pending when 
# reaching this point. For this reason, it is highly 
# advised to rely on webhooks to be notified when a payment 
# has fully been captured
```

```php
<?php
$req = json_decode(file_get_contents("php://input"));

// $invoice is our previously created invoice that we used to 
// create the token
$invoice->capture($req["token"]);

// All good! The capture was successfully captured
// In rare cases, the capture may still be pending when 
// reaching this point. For this reason, it is highly 
// advised to rely on webhooks to be notified when a payment 
// has fully been captured
```

```go
// req is filled with the decoded json data from the request body
// iv is our previously created invoice that we used to create the token
if err := processout.Invoices.Capture(iv, req["token"]); err != nil {
    panic("The payment didn't make it through: " + err.Error())
}

// All good! The capture was successfully captured
// In rare cases, the capture may still be pending when reaching 
// this point. For this reason, it is highly advised to rely on 
// webhooks to be notified when a payment has fully been captured
```

Once a token is generated and sent to your server, you can use it to `authorize`
and `capture` a payment.
Depending on the payment method used (such as a Credit Card or an e-wallet such
as PayPal), an authorization locks the funds on the customer's account for
a certain period of time (on average a week) so you can capture it later.

When capturing a payment, <span class="processout">ProcessOut</span>
will implicitely authorize the payment
first if it hasn't been previously done. It is possible to explicitely 
tell <span class="processout">ProcessOut</span> to only `authorize` a 
payment but not capture it to lock the funds, and call `capture` later. 

### Void

```javascript
// invoice is our previously created invoice that we previously
// authorized
invoice.void().then(function(ok) {
    // All good! The invoice was successfully voided

}, function(err) {
    // An error occured trying to void the payment

});
```

```python
# invoice is our previously created invoice that we previously
# authorized
invoice.void()

# All good! The invoice was successfully voided
```

```php
<?php
// $invoice is our previously created invoice that we previously
// authorized
$invoice->void();

// All good! The invoice was successfully voided
```

```go
// req is filled with the decoded json data from the request body
// iv is our previously created invoice that we used to create the token
if err := processout.Invoices.Void(iv); err != nil {
    panic("The payment didn't make it through: " + err.Error())
}

// All good! The invoice was voided successfully
```

If the customer or the merchant want to cancel an authorization, the merchant
can choose to void it.
A voided authorization may not be captured anymore, and the funds are released
back into the customer's account.


### Alternative payments

On top of accepting credit cards, <span class="processout">ProcessOut</span>
also makes it easy to accept any kind of alternative payment solutions, such
as PayPal or Alipay.

These alternative payment solutions are automatically presented to your 
customers when they visit our [hosted payment page](#hosted-payment-page), 
but we also make it possible for merchants to dynamically show all the 
available alternative payment options during the checkout ProcessOut.

#### Fetch all the alternative gateways

```javascript
// Fetch the project
ProcessOut.Project.Find("<project-id>").then(function(project) {
    project.GatewayConfiguration({
        expand: ["gateway"], 
        filter: "flow: one-off type: redirection"
    }).then(function(gateways) {
        // gateways contain the list of all the credit card providers
        // available for one-off payments on the current project

    }, function(err) {
        // An error occured

    });

}, function(err) {
    // An error occured

});
```

```python
from processout.project import Project

# Fetch the project
project = Project.find("<project-id>")

# And the gateway configurations of the project available for
# one-off credit card payments
gateways = project.gatewayConfigurations({
    expand: ["gateway"],
    filter: "flow: one-off type: redirection"
})
```

```php
<?php
// Fetch the project
$project = \ProcessOut\Project::find("<project-id>");

// And the gateway configurations of the project available for
// one-off credit card payments
$gateways = $project->gatewayConfigurations(array(
    "expand" => array("gateway"),
    "filter" => "flow: one-off type: redirection"
));
```

```go
gateways, erri := p.Projects.GatewayConfigurations(&processout.Project{
	ID: "<project-id>",
}, processout.Options{
	Expand: []string{"gateway"},
    Filter: "flow: one-off type: redirection",
})
```

First, we will need to fetch the available alternative payments. 

This can be done in the same way we fetched the credit card providers 
earlier using a filter with a type set to `redirection`.

<div></div>
#### List them

```javascript
// gateways is the alternative payment gateways configurations we
// previously fetched

for (var i = 0; i < gateways.length; i++) {
    var gateway = gateways[i];

    // We may now show the payment gateway to the customer
    console.log(gateway.getGateway().getName());

    // It is also important to store the ID of the gateway configuration 
    // so we can use it in the next steps
    console.log(gateway.getId());
}
```

```python
# gateways is the alternative payment gateways configurations we
# previously fetched

for gateway in gateways:
    # We may now show the payment gateway to the customer
    print gateway.gateway.name

    # It is also important to store the ID of the gateway configuration
    # so we can use it in the next steps
    print gateway.id
```

```php
<?php
// $gateways is the alternative payment gateways configurations we
// previously fetched

foreach ($gateways as $gateway) {
    // We may now show the payment gateway to the customer
    echo $gateway->getGateway()->getName();

    // It is also important to store the ID of the gateway configuration 
    // so we can use it in the next steps
    echo $gateway->getId();
}
```

```go
// gateways is the alternative payment gateways configurations we
// previously fetched

for _, gateway := range gateways {
    // We may now show the payment gateway to the customer
    fmt.Println(gateway.Gateway.Name)

    // It is also important to store the ID of the gateway configuration
    // so we can use it in the next steps
    fmt.Println(gateway.ID)
}
```

Now that we have the alternative payment gateways configurations, we can
show them to the customer.

It is important to store the gateway configuration ID as it will be used
to redirect the customer when proceeding with the payment.

<div></div>
#### Redirect your customers

```javascript
// invoice is the invoice we previously created
invoice.customerAction("<gateway-configuration-id>").then(function(action) {
    if (action.getType() == "url") {
        // The customer action needed to go through the payment flow is
        // a redirection
        // The user should be redirected to the customer action's value,
        // which in most cases will be the URL to the payment gateway
        // checkout page.
        // When the customer pays, he'll be redirected to the return_url
        // that was set when creating the invoice

        window.location.href = action.getValue();
    }

}, function(err) {
    // An error occured

});
```

```python
# invoice is the invoice we previously created
action = invoice.customerAction("<gateway-configuration-id>")

if action.type == "url":
    # The customer action needed to go through the payment flow is
    # a redirection
    # The user should be redirected to the customer action's value,
    # which in most cases will be the URL to the payment gateway
    # checkout page.
    # When the customer pays, he'll be redirected to the return_url
    # that was set when creating the invoice
    print action.value
```

```php
<?php
// $invoice is the invoice we previously created
$action = $invoice->customerAction("<gateway-configuration-id>");

if ($action->getType() == "url") {
    // The customer action needed to go through the payment flow is
    // a redirection
    // The user should be redirected to the customer action's value,
    // which in most cases will be the URL to the payment gateway
    // checkout page.
    // When the customer pays, he'll be redirected to the return_url
    // that was set when creating the invoice
    echo $action->getValue();
}
```

```go
// iv is the invoice we previously created
action, erri := p.Invoices.CustomerAction(iv, "<gateway-configuration-id>")
if err != nil {
    panic(err.Error())
}

if action.Type == "url" {
    // The customer action needed to go through the payment flow is
    // a redirection
    // The user should be redirected to the customer action's value,
    // which in most cases will be the URL to the payment gateway
    // checkout page.
    // When the customer pays, he'll be redirected to the return_url
    // that was set when creating the invoice
    fmt.Println(iv.Value)
}
```

> Replace `<gateway-configuration-id>` with the configuration ID 
> of the gateway you want to redirect your customer to.

The final step needed to handle alternative payments is to redirect the customer
to its payment page. 

The gateway configuration ID corresponds to the alternative payment gateway
the customer chose during the checkout flow (hence why it was important to
store it in the previous step).

##### What's next

Now that our checkout flow is done, we want to be notified when a new payment or
an update on a transaction occurs. This can be done through our [payment notifications](#payment-notifications).