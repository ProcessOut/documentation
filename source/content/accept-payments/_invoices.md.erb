<div id="accept-payments-category"></div>

## Invoices

### Create an invoice

```javascript
// Create a new invoice
var invoice = new ProcessOut.Invoice();
invoice.setName('Amazing item');
invoice.setAmount('4.99');
invoice.setCurrency('USD');
// You may set any field listed in table on the right pane

// Push it to ProcessOut
// The ProcessOut NodeJS library uses promises to return objects
invoice.create().then(function(invoice) {
    // invoice is our newly created resource

}, function(err) {
    // An error occured

});
```

```python
from processout.invoice import Invoice

# Create a new invoice
invoice          = Invoice()
invoice.name     = 'Amazing item'
invoice.amount   = '4.99'
invoice.currency = 'USD'
# You may set any field listed in table on the right pane

# Push it to ProcessOut. Create returns a new invoice instance
invoice = invoice.create()
```

```php
<?php
// Create a new invoice
$invoice = new \ProcessOut\Invoice();
$invoice
    ->setName('Amazing item')
    ->setAmount('4.99')
    ->setCurrency('USD');
// You may set any field listed in table on the right pane

// Push it to ProcessOut. Create returns a new invoice instance
$invoice = $invoice->create();
```

```go
iv, err := p.Invoices.Create(&processout.Invoice{
	Name:     "Amazing item",
	Amount:   "4.99",
	Currency: "USD",
})
```

Invoices is the core resource for a merchant who wants to accept payments online
using the ProcessOut API.

Creating an invoice for your customers can be done on your server's backend.
Simply create an Invoice resource with a `name`, `amount` and `currency`.

Once the invoice is created, the customer may proceed to checkout through
our available [payment flows](#payment-flows).

##### Attributes
|||
--:|:--
**id**<br />*string*<br />Read-only |
**url**<br />*string*<br />Read-only | `URL` to the ProcessOut checkout page
**customer**<br />*[Customer](#customers)*<br />Read-only |
**name**<br />*string*<br />Required | Name of the invoice/item to sell
**amount**<br />*string*<br />Required | Amount to be paid
**currency**<br />*string*<br />Required | Currency of the invoice, in the ISO 4217 format (ex: `USD`)
**return_url**<br />*string* | `URL` used to redirect the customer once the payment is placed
**cancel_url**<br />*string* | `URL` used to redirect the customer when the payment is canceled |ProcessOut cancelation landing page
**metadata**<br />[Metadata](#metadata)<br />*dictionary* | Context related to the invoice, key-value pair (string => string)
**sandbox**<br />*boolean*<br />Read-only |

### Payment flows

```javascript
console.log(invoice.getUrl());
// > https://checkout.processout.com/64db379a-301f-4db6-859e-a0b342ff0b66

console.log(invoice.getId());
// > 64db379a-301f-4db6-859e-a0b342ff0b66
```

```python
print(invoice.url)
# > https://checkout.processout.com/64db379a-301f-4db6-859e-a0b342ff0b66

print(invoice.id)
# > 64db379a-301f-4db6-859e-a0b342ff0b66
```

```php
<?php
echo $invoice->getUrl();
// > https://checkout.processout.com/64db379a-301f-4db6-859e-a0b342ff0b66

echo $invoice->getId();
// > 64db379a-301f-4db6-859e-a0b342ff0b66
```

```go
fmt.Println(iv.URL)
// > https://checkout.processout.com/64db379a-301f-4db6-859e-a0b342ff0b66

fmt.Println(iv.ID)
// > 64db379a-301f-4db6-859e-a0b342ff0b66
```

Now that we created an invoice, we'll need to make the customer able to interact
with it in order to proceed with the payment.

When you create an invoice, we'll return two things: the invoice `url`, to which
you can redirect your customer to complete the checkout, and the invoice `id`, which
can be used with ProcessOut.js on the [modal](#payment-modal).

### Payment modal

```html
<a class="processout-modal-button"
    href="https://checkout.processout.com/<invoice-id>">
        Test modal
</a>
<script src="https://cdn.processout.com/modal-min.js"></script>
```

> Replace `<invoice-id>` with the invoice ID you just created.

The modal essentially consists of a window showing up above your website so
your customers never leave your environment.

When placed on an `a` HTML element with the class `processout-modal-button`,
the modal will be automatically triggered when the customer clicks on the link.
You may use any other class on the link to style it your way.
