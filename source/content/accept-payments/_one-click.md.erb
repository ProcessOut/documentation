## One-click payments

Very often, merchants want to store their customers' payment details, such
as their credit card, to be able to charge them later, a bit like *Uber* does.
Doing so is especially useful for *Software as a Service* companies,
where they need to charge their users based on their usage of the service.
ProcessOut provides an easy of doing so, while removing all the PCI-DSS compliancy
and payment gateway mangement nightmare.

Once the authorization is completed by the customer, a customer `Token` will
be created. Because the authorization is asynchrone, this token will be sent
over to you using [webhooks](#webhooks-category). You'll then be able to store
this token and use it later to automatically [charge](#charge-using-token) an invoice directly from
your backend.

### Create a request

```javascript
// Create a new authorization request
var authorizationReq = new ProcessOut.AuthorizationRequest();
authorizationReq.setName('Amazing authorization request');
authorizationReq.setCurrency('USD');
// You may set any field listed in table on the right pane

// Push it to ProcessOut
// The ProcessOut NodeJS library uses promises to return objects
authorizationReq.create('<customer-id>').then(function(authorizationReq) {
    // authorizationReq is our newly created authorization request

}, function(err) {
    // An error occured

});
```

```python
from processout.authorizationrequest import AuthorizationRequest

# Create a new authorization request
authorizationReq          = AuthorizationRequest()
authorizationReq.name     = 'Amazing authorization request'
authorizationReq.currency = 'USD'
# You may set any field listed in table on the right pane

# Push it to ProcessOut. Create returns a new authorization request instance
# for the given customer ID
authorizationReq = authorizationReq.create('<customer-id>')
```

```php
<?php
// Create a new authorization request
$authorizationReq = new \ProcessOut\AuthorizationRequest();
$authorizationReq
    ->setName('Amazing authorization request')
    ->setCurrency('USD');
// You may set any field listed in table on the right pane

// Push it to ProcessOut. Create returns a new authorization request instance
// for the given customer ID
$authorizationReq = $authorizationReq->create('<customer-id>');
```

```go
// Create a new authorization request for the given customer ID
auth, err := p.AuthorizationRequests(&processout.AuthorizationRequest{
    Name:     "Amazing authorization request",
    Currency: "USD",
}, "<customer-id>")
```

> Replace `<customer-id>` with the customer ID.

Authorizations requests can be seen as one-click payment requests made to your
customer.

Once the authorization request is created, the customer may proceed to checkout
through our available [authorization flows](#authorization-flows).

##### Attributes
|||
--:|:--
**id**<br />*string*<br />Read-only |
**url**<br />*string*<br />Read-only | `url` to the ProcessOut authorization page
**customer**<br />*[Customer](#customers)*<br />Read-only |
**currency**<br />*string*<br />Required | Currency of the authorization, in the ISO 4217 format (ex: `USD`, `EUR`)
**name**<br />*string* | Name given to the authorization, displayed on the authorization page
**return_url**<br />*string* | `url` used to redirect the customer once the authorization is placed
**cancel_url**<br />*string* | `url` used to redirect the customer when the authorization is canceled |ProcessOut cancelation landing page
**metadata**<br />[Metadata](#metadata)<br />*dictionary* | Context related to the authorization request, key-value pair (string => string)
**sandbox**<br />*boolean*<br />Read-only |

### Authorization flows

```javascript
console.log(authorizationReq.getUrl());
// > https://checkout.processout.com/64db379a-301f-4db6-859e-a0b342ff0b66

console.log(authorizationReq.getId());
// > 64db379a-301f-4db6-859e-a0b342ff0b66
```

```python
print(authorizationReq.url)
# > https://checkout.processout.com/64db379a-301f-4db6-859e-a0b342ff0b66

print(authorizationReq.id)
# > 64db379a-301f-4db6-859e-a0b342ff0b66
```

```php
<?php
echo $authorizationReq->getUrl();
// > https://checkout.processout.com/64db379a-301f-4db6-859e-a0b342ff0b66

echo $authorizationReq->getId();
// > 64db379a-301f-4db6-859e-a0b342ff0b66
```

```go
fmt.Println(auth.URL)
// > https://checkout.processout.com/64db379a-301f-4db6-859e-a0b342ff0b66

fmt.Println(auth.ID)
// > 64db379a-301f-4db6-859e-a0b342ff0b66
```

Now that we created an authorization request, we'll need to make the customer able to
interact with it in order to proceed with the authorization.

When you create an authorization request, we'll return two things: the authorization
`url`, to which you can redirect your customer to complete the authorization,
and the authorization request `id`, which can be used with ProcessOut.js on the
[modal](#authorization-modal).

### Authorization modal

```html
<a class="processout-modal-button"
    href="https://checkout.processout.com/<authorization-request-id>">
        Test modal
</a>
<script src="https://js.processout.com/modal.js"></script>
```

> Replace `<authorization-request-id>` with the authorization request ID you just created.

The modal essentially consists of a window showing up above your website so
your customers never leave your environment.

When placed on an `a` HTML element with the class `processout-modal-button`,
the modal will be automatically triggered when the customer clicks on the link.
You may use any other class on the link to style it your way.

### Charge using token

```javascript
// invoice is an invoice we already fetched/created
var success = invoice.charge('<customer-token-id>');
```

```python
# invoice is an invoice we already fetched/created
success = invoice.charge('<customer-token-id>')
```

```php
<?php
// $invoice is an invoice we already fetched/created
$success = $invoice->charge('<customer-token-id>');
```

```go
// iv is an invoice we already fetched/created
err := p.Invoices.Charge(iv, "<customer-token-id>")
```

> Replace `<customer-token-id>` with the customer token ID.

Once a customer goes through the authorization process successfully, a customer `Token`
will be generated. This token can be used to charge any invoice directly from
your backend, without the need for your customer's confirmation.

Please keep in mind that in order to automatically charge an invoice using a
customer token, you'll first need to link the customer to the invoice first.
