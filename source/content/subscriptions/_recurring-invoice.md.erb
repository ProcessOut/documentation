## Recurring invoices

### Create a recurring invoice

```javascript
// Create a new recurring invoice
var recurringInvoice      = new ProcessOut.RecurringInvoice();
recurringInvoice.setName('Amazing item');
recurringInvoice.setAmount('4.99');
recurringInvoice.setCurrency('USD');
// Set the recurring period to a month
recurringInvoice.setInterval("1m");
// If we wanted to do an interval of a month and two weeks + 3 days,
// we could do:
// recurringInvoice.setInverval("1m2w3d");
// You may set any field listed in table on the right pane

// Push it to ProcessOut. You will need the customer ID of a previously
// generated customer
recurringInvoice.create('<customer-id>').then(function(recurringInvoice) {
    // recurringInvoice is our newly created recurring invoice resource

}, function(err) {
    // An error occured

});
```

```python
from processout.recurringinvoice import RecurringInvoice

# Create a new recurring invoice object
recurringInvoice          = RecurringInvoice()
recurringInvoice.name     = 'Amazing item'
recurringInvoice.amount   = '4.99'
recurringInvoice.currency = 'USD'
# Set the recurring period to a month
recurringInvoice.interval = "1m"
# If we wanted to do an interval of a month and two weeks + 3 days,
# we could do:
# recurringInvoice.interval = "1m2w3d"
# You may set any field listed in table on the right pane

# Push it to ProcessOut. Create returns a new recurring invoice instance
# You will need the customer ID of a previously generated customer
recurringInvoice = recurringInvoice.create('<customer-id>')
```

```php
<?php
// Create a new recurring invoice
$recurringInvoice = new \ProcessOut\RecurringInvoice();
$recurringInvoice
    ->setName('Amazing item')
    ->setAmount('4.99')
    ->setCurrency('USD')
    // Set the recurring period to a month
    ->setInterval("1m");
    // If we wanted to do an interval of a month and two weeks + 3 days,
    // we could do:
    // ->setInverval("1m2w3d");
// You may set any field listed in table on the right pane

// Push it to ProcessOut. Create returns a new recurring invoice instance
// You will need the customer ID of a previously generated customer
$recurringInvoice = $recurringInvoice->create('<customer-id>');
```

```go
// Define a new recurring invoice
riv := &processout.RecurringInvoice{
	Name:     "Amazing item",
	Amount:   "4.99",
	Currency: "USD",
	Interval: "1m",
    // If we wanted to do an interval of a month and two weeks + 3 days,
    // we could do:
    // Interval: "1m2w3d",

	// Set anything you want that isn't read-only
}
// Create it on ProcessOut. You will need the ID of a Customer
// that you have previously created.
riv, err := p.RecurringInvoices.Create(riv, customerID)
```

> Replace `<customer-id>` with the customer ID.

Create a recurring invoice.
The field `interval` must be set. To make it easy to define precise subscription
intervals, `interval` is a signed sequence of decimal numbers, such as "1m",
"2w" or "1m15d". Valid time units are "d" for days, "w" for weeks, "m" for months
and "y" for years. `interval` must represent a positive number of days.

The field `trial_period` has the same signature and works the same way, but can
represent a trial period of zero days.


##### Attributes
|||
--:|:--
**id**<br />*string*<br />Read-only |
**url**<br />*string*<br />Read-only | `url` to the ProcessOut checkout page
**customer**<br />*[Customer](#customers)*<br />Read-only |
**name**<br />*string*<br />Required | Name of the recurring invoice/item to sell
**amount**<br />*string*<br />Required | Amount to be paid at every iteration of the subscription
**currency**<br />*string*<br />Required | Currency of the recurring invoice, in the ISO 4217 format (ex: `USD`)
**interval**<br />*string*<br />Required | Number of days for the recurring period
**trial_period**<br />*string* | Number of days for the trial period, before which the customer won't pay. Defaults to `0d`
**metadata**<br />[Metadata](#metadata)<br />*dictionary* | Context related to the recurring invoice, key-value pair (string => string)
**return_url**<br />*string* | `url` used to redirect the customer once the payment is placed
**cancel_url**<br />*string* | `url` used to redirect the customer when the payment is canceled |ProcessOut cancelation landing page
**ended**<br />*boolean* |
**ended_reason**<br />*boolean* | If `ended` is true, represents the reason why the recurring invoice was ended
**sandbox**<br />*boolean*<br />Read-only |

### Authorization flows

```javascript
console.log(recurringInvoice.getUrl());
// > https://checkout.processout.com/64db379a-301f-4db6-859e-a0b342ff0b66

console.log(recurringInvoice.getId());
// > 64db379a-301f-4db6-859e-a0b342ff0b66
```

```python
print(recurringInvoice.url)
# > https://checkout.processout.com/64db379a-301f-4db6-859e-a0b342ff0b66

print(recurringInvoice.id)
# > 64db379a-301f-4db6-859e-a0b342ff0b66
```

```php
<?php
echo $recurringInvoice->getUrl();
// > https://checkout.processout.com/64db379a-301f-4db6-859e-a0b342ff0b66

echo $recurringInvoice->getId();
// > 64db379a-301f-4db6-859e-a0b342ff0b66
```

```go
fmt.Println(iv.URL)
// > https://checkout.processout.com/64db379a-301f-4db6-859e-a0b342ff0b66

fmt.Println(iv.ID)
// > 64db379a-301f-4db6-859e-a0b342ff0b66
```

Now that we created a recurring invoice, we'll need to make the customer able
to interact with it in order to proceed with the authorization of the recurring
billing.

When you create a recurring invoice, we'll return two things: the recurring
invoice `url`, to which you can redirect your customer to complete the authorization,
and the recurring invoice `id`, which can be used with ProcessOut.js on the
modal.

### Authorization modal

```html
<a class="processout-modal-button"
    href="https://checkout.processout.com/<recurring-invoice-id>">
        Test modal
</a>
<script src="https://js.processout.com/modal.js"></script>
```

> Replace `<recurring-invoice-id>` with the recurring invoice ID you just created.

The modal essentially consists of a window showing up above your website so
your customers never leave your environment.

When placed on an `a` HTML element with the class `processout-modal-button`,
the modal will be automatically triggered when the customer clicks on the link.
You may use any other class on the link to style it your way.
