<div id="webhooks-category"></div>

## Webhooks

Processing [events](#events) can also be done through webhooks (also called
callbacks or Instant Payment Notification: IPN). It is essentially a web
request made to your web application, posting the data related to the event.
Webhooks can be used to automatically deliver an item upon successful
payment, for instance, without the need for an application running in the
background.

However, as many payment gateways can be used at the same time, ProcessOut
provides webhooks containing unified, normalized and easy to use data, as well
as transaction states corresponding to the triggered event.

### Pre-requisites

In order to start receiving webhooks, you must add your `notify_url`s in your
[ProcessOut dashboard](https://dashboard.processout.com).

You should also note that *we will always `POST` a json encoded body request*
to your application. Therefore, you should accept POST requests with a json body.

Furthermore, you should *remove all CSRF protection* on your endpoints receiving
webhooks. Most frameworks and CMS activate it by default, which could
prevent ProcessOut from correctly posting webhooks to your application.


### Usage

```javascript
// req is filled with the decoded json data from the request body
// and headers is filled with the request headers
switch (req['name']) {
case 'invoice.transaction.completed':
    // Transaction successful
    break;
case 'invoice.transaction.pending':
    // Transaction still needs some time to be processed
    break;
// ...
default:
    console.log('Unknown webhook action');
    return;
}
```

```python
from processout.webhook import Webhook

# req is filled with the decoded json data from the request body
if req['name'] == 'invoice.transaction.completed':
    # Transaction successful
    pass

elif req['name'] == 'invoice.transaction.pending':
    # Transaction still needs some time to be processed
    pass

# ...

else:
    # Shouldn't be here..
    print('Unknown webhook action')
```

```php
<?php
$reqRaw = trim(file_get_contents('php://input'));
$req    = json_decode($reqRaw, true);

switch($req['name'])
{
case 'invoice.transaction.completed':
    // Transaction successful
    break;
case 'invoice.transaction.pending':
    // Transaction still needs some time to be processed
    break;
// ...
default:
    echo 'Unknown webhook action'; exit();
}
?>
```

```go
// ProcessOutWebhook is the definition of a ProcessOut webhook
type ProcessOutWebhook struct {
    Name        string                  `json:"name"`
    Sandbox     bool                    `json:"sandbox"`
    Invoice     *processout.Invoice     `json:"invoice"`
    Transaction *processout.Transaction `json:"transaction"`
    Customer    *processout.Customer    `json:"customer"`
}

func handleProcessOutWebhooks(w http.ResponseWriter,
	r *http.Request) {

	defer r.Body.Close()
	reqRaw, err := ioutil.ReadAll(r.Body)
	if err != nil {
		panic(err)
	}

	// Decode the webhook
	webhook := &ProcessOutWebhook{}
	err = json.Unmarshal(reqRaw, &webhook)
	if err != nil {
		// Invalid webhook data
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	// Everything is okay, process the webhook
	switch webhook.Name {
	case "invoice.transaction.completed":
		// Successful transaction

	case "invoice.transaction.pending":
		// Transaction still needs some time to be processed

	// ...

	default:
		// Return an HTTP OK response so that unsuported
		// webhooks do not get sent again
		w.WriteHeader(http.StatusOK)
		return
	}
}
```

Now that your webhook is correctly set up, we need to make sure it is correctly
processed and authenticated by your application.

You should also make sure that when deployed on your production environment,
you do not accept sandbox webhooks anymore.

Once correctly processed by your application, you should always return a
`status 200 response`. If you don't, ProcessOut will try to send the webhook
again, waiting an increasing amount of time between each tries.
