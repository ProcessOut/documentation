---
title: Events & webhooks
---

## Handle status changes and webhooks

When using the [`capture` &nearr;](/payments/capture-a-payment.html) endpoint, a 
[`Transaction` &nearr;](/refs/index.html#transactions) is
returned if there was no error when processing the payment. However, the
payment may still be pending, and a few fail-safes should be put in place.

<hr>

#### Why should I use webhooks

Transactions can get stuck in an in-between pending & captured states, which
makes it crucial to set up a way to be notified when the status
of an invoice and/or transaction gets updated.

Most of the time with payments done by credit card, the merchant will know 
instantly if the payment made it through. However, with most alternative
payment methods this is not the case, and payments can sometimes take a few 
minutes to be completely processed. Because of this, it is not possible to
synchronously tell the customer or the merchant if the payment completely
made it through: the payment is still pending.

When a payment is done with a credit card, it is also possible that it was
successfully processed but that the customer choses to chargeback the payment
later. Handling webhooks will also make you able to handle this case and
appropriately update your customer's profile on your business.

#### Transaction statuses

During a transaction's life, its status will change several depending depending
on several factors. For instance, when a payment is placed and confirmed, the
transaction's status will switch from `pending` to `completed`.

You may find the list of all the available transaction's statuses below:

|||
--:|:--
<div style="white-space: nowrap; color: #795da3;" class="console-font">waiting</div> | No payment has been placed yet
<div style="white-space: nowrap; color: #795da3;" class="console-font">pending</div> | The payment is pending confirmation by the payment gateway
<div style="white-space: nowrap; color: #795da3;" class="console-font">authorized</div>   | The payment was authorized but not yet captured
<div style="white-space: nowrap; color: #795da3;" class="console-font">completed</div>   | The payment was sucessfully completed
<div style="white-space: nowrap; color: #795da3;" class="console-font">failed</div> | The payment has been placed, but failed
<div style="white-space: nowrap; color: #795da3;" class="console-font">voided</div> | The payment was voided
<div style="white-space: nowrap; color: #795da3;" class="console-font">disputed</div> | The payment was previously completed but the customer filled a dispute
<div style="white-space: nowrap; color: #795da3;" class="console-font">solved</div> | The previous dispute has been resolved in your favor
<div style="white-space: nowrap; color: #795da3;" class="console-font">reversed</div> | The previous dispute has been resolved in your customerâ€™s favor
<div style="white-space: nowrap; color: #795da3;" class="console-font">partially-refunded</div> | The transaction was partially refunded
<div style="white-space: nowrap; color: #795da3;" class="console-font">refunded</div> | The transaction was refunded

#### Create a webhook endpoint

First, we'll have to create an endpoint on our online service that accepts
requests from the Internet. This is the address to which ProcessOut will
`POST` JSON data to notify you of the new events. Any `CSRF` protection
should also be removed from this endpoint to ensure to correct processing
of the webhook.

Handling the webhook data is very simple: ProcessOut will post the ID of the 
event that was fired, and we'll just have to fetch its data from the ProcessOut's
API. ProcessOut does not directly send the whole data of the event to ensure
that the merchants checks the legitimicy of the event by first calling the API.

<div class="language-selector-wrapper">
<%= partial "lg-selector" %>
```shell
# cURL cannot be used to handle webhooks
```

```javascript
<%= partial "header-js" %>
// req is filled with the decoded json data from the request body
client.newEvent().find(req["event_id"]).then(function(event) {
    // We may now access the event
    var data = event.getData();

    switch (data["name"]) {
    case "invoice.completed":
        // Successful payment
        break;
    case "invoice.pending":
        // Payment still needs some time to be processed
        break;
    // ...
    default:
        console.log("Unknown webhook action");
        return;
    }

}, function(err) {
    // An error occured, most likely the event was coming from an
    // untrusted source

});
```

```python
<%= partial "header-python" %>

# req is filled with the decoded json data from the request body
event = client.new_event().find(req["event_id"])
data  = event.data

if data["name"] == "invoice.completed":
    # Successful payment
    pass

elif data["name"] == "invoice.pending":
    # Payment still needs some time to be processed
    pass

# ...

else:
    # Shouldn't be here..
    print("Unknown webhook action")
```

```ruby
<%= partial "header-ruby" %>

# req is filled with the decoded json data from the request body
event = client.event.find(req.event_id)
data  = event.data

if data["name"] == "invoice.completed"
    # Successful payment

elsif data["name"] == "invoice.pending"
    # Payment still needs some time to be processed

# ...

else
    # Shouldn't be here..
    print("Unknown webhook action")
end
```

```php
<%= partial "header-php" %>
$reqRaw = trim(file_get_contents("php://input"));
$req    = json_decode($reqRaw, true);

$event = $client->newEvent()->find($req["event_id"]);
$data  = $event->getData();

switch($data["name"])
{
case "invoice.completed":
    // Successful payment
    break;
case "invoice.pending":
    // Payment still needs some time to be processed
    break;
// ...
default:
    echo "Unknown webhook action"; exit();
}
```

```go
<%= partial "header-go" %>
// EventData is the definition of a ProcessOut Event data
type EventData struct {
    Name        string              `json:"name"`
    Sandbox     bool                `json:"sandbox"`
    Invoice     *processout.Invoice `json:"invoice"`
}

// ProcessOutWebhook is the definition of a ProcessOut webhook
type ProcessOutWebhook struct {
    EventID string `json:"event_id"`
}

func handleProcessOutWebhooks(w http.ResponseWriter,
	r *http.Request) {

	defer r.Body.Close()
	reqRaw, err := ioutil.ReadAll(r.Body)
	if err != nil {
		panic(err)
	}

	// Decode the webhook
	webhook := &ProcessOutWebhook{}
	json.Unmarshal(reqRaw, &webhook)

    // Fetching the associated event
    event, err := client.NewEvent().Find(webhook.EventID)
    if err != nil {
        // Webhook not found, most likely coming from an
        // insecure source
		w.WriteHeader(http.StatusBadRequest)
		return
    }

    e, _ := event.(EventData)
	switch e.Name {
	case "invoice.completed":
		// Successful payment

	case "invoice.pending":
		// Payment still needs some time to be processed

	// ...

	default:
		// Return an HTTP OK response so that unsuported
		// webhooks do not get sent again
		w.WriteHeader(http.StatusOK)
		return
	}
}
```
</div>

The full list of events can be found in our [`API reference` &nearr;](/refs/index.html#invoice-events).

#### Set up webhook endpoints

In order to receive webhooks, you will need to go to your 
[Dashboard &nearr;](https://dashboard.processout.com) &rsaquo; Events &rsaquo; and add a
new webhook endpoint. This endpoint will be called by our servers to notify
yours of the new Event. This endpoint should therefore made accessible for us
to `POST` JSON data to it.

You should now be ready to handle any event!