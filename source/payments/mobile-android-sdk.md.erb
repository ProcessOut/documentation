---
title: "mobile: Android integration"
---

# mobile: Android integration

The easiest way to start accepting payments on Android devices using ProcessOut
is to use the ProcessOut Android SDK.
The SDK will take care of tokenizing your customers' card numbers, so that
you can send those generated tokens to your backend and [process payments &nearr;](/payments/capture-a-payment).

See our [iOS integration guide &nearr;](/payments/mobile-ios-sdk) to handle Apple's devices as well.

<div class="row margin-top" style="margin-bottom: 4em;">
    <div class="medium-6 columns">
        <a href="/payments/mobile-android-sdk/#tokenize-a-card">
            <div class="shadow-background rounded">
                Accept card payments &rsaquo;
                <p style="color: black;">
                    Accept card payments in your mobile app using our SDK.
                </p>
            </div>
        </a>
    </div>
    <div class="medium-6 columns">
        <a href="/payments/mobile-android-sdk/#alternative-payment-methods">
            <div class="shadow-background rounded">
                Alternative payment methods &rsaquo;
                <p style="color: black;">
                    Allow users to pay using alternative payment methods.
                </p>
            </div>
        </a>
    </div>
</div>

<hr>

## Requirements

The ProcessOut Android SDK is available on *Android SDK 14+*.

ProcessOut is available through Jitpack. To install it, 
simply add the following line to your build file:

```gradle
allprojects {
    repositories {
        ...
        maven { url 'https://jitpack.io' }
    }
}
```

as well as this dependency in your `build.gradle` file:

```gradle
dependencies {
    compile 'com.github.processout:processout-android:2.2'
}
```

You'll then be able to import Processout in your code base and configure the SDK
with your ProcessOut API credentials.

```java
// You can find your project ID in your dashboard
final ProcessOut client = new ProcessOut(this, 
    "test-<%= partial "projectID" %>");
```

## Tokenize a card

Once all set up, you'll be able to tokenize the card numbers. The returned
token is a simple `string`.

```java
// First create a card object containing the card details
Card card = new Card("Jeremy lejoux", "4242424242424242", 11, 19, "123");

// And then send the card data to ProcessOut to tokenize
client.tokenize(card, new TokenCallback() {
    @Override
    public void onSuccess(String token) {
        // Send the card token to your backend for charging
    }

    @Override
    public void onError(Exception error) {
        Log.e("ProcessOut", error.toString());
    }
});
```

## Alternative payment methods
ProcessOut also supports alternative payment methods with a redirection flow.

First you'll need to generate an invoice in your backend and retrieve that invoice ID in order to fetch all the active configurations available for that invoice.
You'll also need to provide this invoice with a specific return url of this form: `yourapp://processout.return`


<div class="language-selector-wrapper">
<%= partial "lg-selector" %>
```shell
curl -X POST https://api.processout.com/invoices \
    <%= partial "header-curl" %> \
    -d name="Awesome invoice" \
    -d amount="9.99" \
    -d currency=USD 
    -d return_url="yourapp://processout.return"
```

```javascript
<%= partial "header-js" %>
client.newInvoice().create({
    name:     "Amazing item",
    amount:   "4.99",
    currency: "USD",
    return_url: "yourapp://processout.return"
}).then(function(invoice) {
    // invoice is our newly created resource

}, function(err) {
    // An error occured

});
```

```python
<%= partial "header-python" %>
invoice = client.new_invoice().create({
    "name":     "Amazing item",
    "amount":   "4.99",
    "currency": "USD",
    "return_url": "yourapp://processout.return"
})
```

```ruby
<%= partial "header-ruby" %>
invoice = client.invoice.create(
    name:     "Amazing item",
    amount:   "4.99",
    currency: "USD",
    return_url: "yourapp://processout.return"
)
```

```php
<%= partial "header-php" %>
$invoice = $client->newInvoice()->create(array(
    "name"     => "Amazing item",
    "amount"   => "4.99",
    "currency" => "USD"
    "return_url" => "yourapp://processout.return"
));
```

```go
<%= partial "header-go" %>
iv, err := client.NewInvoice().Create(processout.InvoiceCreateParameters{
    Invoice: &processout.Invoice{
        Name:     processout.String("Amazing item"),
        Amount:   processout.String("4.99"),
        Currency: processout.String("USD"),
        ReturnUrl: processout.String("yourapp://processout.return")
    },
})
```
</div>


Then, you'll be able to display your APM to your users.

```java
final ProcessOut p = new ProcessOut(this, "test-proj_OET06P4r3J8A1jT1XnaEZjWNp6zKFBZ5");
p.listAlternativeMethods("invoice-id", new ListAlternativeMethodsCallback() {
    @Override
    public void onSuccess(ArrayList<AlternativeGateway> gateways) {
        for (AlternativeGateway g :
            gateways) {
            // display the gateway to your user
        }
    }

    @Override
    public void onError(Exception e) {
        e.printStackTrace();
    }
});
```

In order to use a specific alternative payment method configuration simply use its `redirect` method.

Then you'll need to handle your customers returning to your app.
To do so, add an `intent-filter` to your payment activity like so:

```java
<activity
    android:name=".MainActivity"
    android:label="@string/app_name"
    android:theme="@style/AppTheme.NoActionBar" >
    <intent-filter>
        <action android:name="android.intent.action.MAIN" />

        <category android:name="android.intent.category.LAUNCHER" />
    </intent-filter>
    <intent-filter android:label="@string/processout_return">
        <action android:name="android.intent.action.VIEW" />
        <category android:name="android.intent.category.DEFAULT" />
        <category android:name="android.intent.category.BROWSABLE" />
        <data android:scheme="your_app"
            android:host="processout.return" />
    </intent-filter>
</activity>
```

This will ensure that your app catches all the `your_app://processout.com` urls.
Once done, you'll be able to retrieve the chargeable token :

```java
@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    Intent intent = getIntent();
    Uri data = intent.getData();
    if (data != null)
        Log.d("PROCESSOUT", "TOKEN=" + data.getQueryParameter("token"));
}
```

You should then send this token to your backend in order to complete the transaction.

## Next steps

You're all set! You can now send the newly created token to your backend
to:

- Handle simple one-off payments by [capturing a payment &nearr;](/payments/capture-a-payment);
- Set up recurring billing for your customers by [creating a subscription &nearr;](/subscriptions/get-started); or
- Providing one-click payments [by saving the token for later use &nearr;] (/payments/save-token-and-capture-later).

If you're currently setting up payments for your mobile application, you're
also most likely developping it for the iOS platform as well. We have
a very similar SDK available for Apple's devices, [available here &nearr;](/payments/mobile-ios-sdk). 
Feel free to check it out!
