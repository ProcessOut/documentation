---
title: Payment modal
---

## Payment modal

The easiest way to start accepting payments using the ProcessOut platform is
to use the ProcessOut embedded payment modal.
The modal will take care of handling the entire payment flow of your customer. It
is an easy and effective way to get paid for products or services you sell.

If you'd rather control the whole checkout experience of your customer, we've also
created [`ProcessOut.js` &nearr;](/payments/processoutjs) that lets you
do just that.

<hr>

#### Getting started with an invoice

To get started, let's create an [`Invoice` &nearr;](/refs/#invoices):

<div class="language-selector-wrapper">
<%= partial "lg-selector" %>
```shell
curl https://api.processout.com/invoices \
    <%= partial "header-curl" %> \
    -d name="Awesome invoice" \
    -d amount="9.99" \
    -d currency=USD 
```

```javascript
<%= partial "header-js" %>
client.newInvoice().create({
    name:     "Amazing item",
    amount:   "4.99",
    currency: "USD"
}).then(function(invoice) {
    //

}, function(err) {
    // An error occured

});
```

```python
<%= partial "header-python" %>
invoice = client.new_invoice().create({
    "name":     "Amazing item",
    "amount":   "4.99",
    "currency": "USD"
})
```

```ruby
<%= partial "header-ruby" %>
invoice = client.invoice.create(
    name:     "Amazing item",
    amount:   "4.99",
    currency: "USD"
)
```

```php
<%= partial "header-php" %>
$invoice = $client->newInvoice()->create(array(
    "name"     => "Amazing item",
    "amount"   => "4.99",
    "currency" => "USD"
));
```

```go
<%= partial "header-go" %>
iv, err := client.NewInvoice().Create(processout.InvoiceCreateParameters{
    Invoice: &processout.Invoice{
        Name:     processout.String("Amazing item"),
        Amount:   processout.String("4.99"),
        Currency: processout.String("USD"),
    },
})
```
</div>

This newly created invoice will give us an `url`, which we can use to redirect
the customer to the checkout page. 

```html
<a href="<generated-link-goes-here>">Pay now!</a>
```

Once the payment goes through, you'll
receive an email notifying you of the payment. You may also use our [`Webhooks` &nearr;](/refs/#webhooks)
to programmatically execute actions when you get paid. 


#### Embed the modal in your website

Redirecting customers to a new payment page often means a total change of payment
context, which can significantly reduce your conversion rates. For this reason,
ProcessOut lets merchants use the payment modal directly on their websites so
that your customers never change context.

To automatically embed the modal in your website, only 2 lines are needed:

```html
<a href="<generated-link-goes-here>" class="processout-modal-button">Pay now!</a>
<script src="https://js.processout.com/modal.js"></script>
```

Notice the `processout-modal-button`: it is used by [`ProcessOut.js` &nearr;](/payments/processoutjs)
to deduct which link should be converted to a modal.


#### Advanced modal use case

While automatically converting links to embed the modal is very handy, it can
be quite limited in some use-cases. It is possible to control the flow of the
modal and manually trigger its loading/appearance using some Javascript.

```javascript
var processOut = new ProcessOut.ProcessOut("<%= partial "projectID" %>");

processOut.newModal({
  url: "https://checkout.processout.com/resource-id",
  // or:
  amount:   5.99,
  currency: "USD",
  name:     "$5.99 invoice",
  onReady: function(modal) {
    modal.show({
      onShow:         function(modal)       { /* ... */ },
      onHide:         function(modal)       { /* ... */ },
      onError:        function(modal, err)  { /* ... */ },
      onPayment:      function(modal, data) { /* ... */ },
      onPaymentError: function(modal, err)  { /* ... */ }
    });
  },
  onError: function(err) {
    console.log("The modal couldn't be loaded:"+err);
  }
});
```