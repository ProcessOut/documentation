---
title: Self hosted payment form — ProcessOut.js
---

## Your own payment forms <span style="opacity: 0.7; font-size: 0.5em;">— self-hosted payment form</span>

While the ProcessOut payment modal is a great way to start, it isn't that
customizable. `ProcessOut.js` lets you entirely control the payment flow
on your own pages and removes any ProcessOut branding- effectively making
ProcessOut invisible to your end-user. `ProcessOut.js` is available and free
for every ProcessOut user.

<hr>

### Compliant with PCI DSS SAQ A-EP

By using your own form, you're elligible to [PCI DSS A-EP Self-Assessment Questionary &nearr;](https://www.pcisecuritystandards.org/documents/PCI-DSS-v3_2-SAQ-A_EP-rev1_1.pdf).

Please note that because the payment form is still controlled by you (the merchant),
the PCI DSS scope is increased, and the questions in the Self-Assessment Questionary (SAQ)
are more complicated than the ones for the [PCI DSS SAQ A &nearr;](https://www.pcisecuritystandards.org/documents/PCI-DSS-v3_2-SAQ-A-rev1_1.pdf).

ProcessOut also offers a solution fully compliant with the PCI DSS SAQ A. If you're not
sure about the PCI compliancy of your payment page, we strongly advise you to 
rather use [ProcessOut's hosted payment fields &nearr;](/payments/processoutjs-hosted-fields), which still lets you have payment inputs
in your own payment page using iframes.

#### Setting up

Let's set up a payment form.

```html
<form action="/your-capture-endpoint" method="POST" id="payment-form">
  <input type="number" id="cardNumber" placeholder="4242 4242 4242 4242">
  <input type="text"   id="cardExpiry" placeholder="Expiration date (mm / yy)">
  <input type="number" id="cardCVC"    placeholder="CVC">

  <input type="submit" class="submit" value="Submit Payment">
</form>
```

For the payment form to be interactable, you will need to load `ProcessOut.js`. 
It is important to **always** load it from our CDN like shown below. Please note that
ProcessOut.js has no dependency, meaning it can work without jQuery.

```html
<script src="https://js.processout.com/processout.js"></script>
```

Now that `ProcessOut.js` is loaded, we can start using it. Let's first
instanciate a new `ProcessOut` instance in a different script tag as soon
as the DOM is fully loaded, and setup our form:

```javascript
document.addEventListener("DOMContentLoaded", function() {
  var client = new ProcessOut.ProcessOut("<%= partial "projectID" %>");
  var formElement = document.getElementById("payment-form");
  client.setupForm(formElement, processoutReadyHandler, function(err) {
    alert("Woops, couldn't setup the form: "+err);
  });
});
```

**Note**: Remember to replace the project ID in the example with your own. When testing,
prepend your project ID with `test-` like so: `test-<%= partial "projectID" %>`.

We also still have to add the handler, which we'll do just now:

#### Bind the form and tokenize the card

As soon as the form is fully loaded, `setupForm` will call `processoutReadyHandler` 
with the created `CardForm` object. We'll use this object to handle the
tokenization transparently.

Let's bind the form submission and tokenize the card:

```javascript
function processoutReadyHandler(form) {
  // The form is now fully loaded!
  formElement.addEventListener("submit", function(e) {
    // Cancel any default action
    e.preventDefault();

    // Create a card object containing the values entered in 
    // our payment form
    var card = new ProcessOut.Card(
      document.getElementById("cardNumber").value,
      // ProcessOut.js can parse expiry dates as well
      ProcessOut.Expiry.parse(
        document.getElementById("cardExpiry").value
      ),
      document.getElementById("cardCVC").value,
    );

    // Let's tokenize the card
    client.tokenize(card, {}, function(token) {
      var field   = document.createElement("input");
      field.type  = "hidden";
      field.name  = "token";
      field.value = token;

      // We add the token input so that it's sent back to 
      // the server. The only thing left to do is to 
      // submit the form
      formElement.submit();
    }, function(err) {

      // Card validation errors or network issues are returned
      // as well. Find the full list of errors below
      alert(err.message);
    });

    return false;
  });
}
``` 

#### Validation and error handling

When tokenizing a card or catching errors, ProcessOut returns custom exceptions which
can be used to better understand what happened and show friendly messages to
your users.

```javascript
client.tokenize(card, {}, function(token) {}, function(err) {
  switch (err.code) {
  case "card.declined":
    break; // The card was declined, a new one should be submitted
  case "card.expired":
    break; // The card is expired, a new one should be submitted
  case "card.invalid":
    break; // The card is invalid
  case "card.invalid-number":
    break; // The card number is invalid
  case "card.invalid-date", "card.invalid-month", "card.invalid-year":
    break; // The card expiration date is invalid
  case "card.invalid-cvc":
    break; // The card CVC is invalid
  default:
    // Another less common error was thrown
  }

  // It is also possible to display a friendly message to the user:
  alert(err.message);
});
```

#### What's next?

We've sent the card token back to our server. Let's use it to 
[capture a payment &nearr;](/payments/capture-a-payment) or to 
[create a subscription &nearr;](/subscriptions/get-started).