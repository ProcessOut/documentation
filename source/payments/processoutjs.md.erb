---
title: Your payment forms with ProcessOut.js
---

## Your own payment forms

While the ProcessOut payment modal is a great way to start, it isn't that
customizable. `ProcessOut.js` lets you entirely control the payment flow
on your own pages and removes any ProcessOut branding- effectively making
ProcessOut invisible to your end-user. `ProcessOut.js` is available and free
for every ProcessOut user.

<hr>

#### Common payment flow

A common payment flow is composed of the following steps:

* The customer enters its credit card information on the merchant's website
* ProcessOut.js creates a secure token from the card and returns it to the merchant's script
* The merchant sends the token back to its backend and captures the payment

Behind the scenes, ProcessOut will encrypt the credit card information, send it to the ProcessOut vault to tokenize it, and return the created token to the merchant. This effectively makes the merchant escape from the PCI-DSS nightmare.

#### Setting up

Let's set up a payment form.
**Please note that the credit card fields aren't actual input boxes,** but are only
`div`s. To ensure PCI-compliancy, ProcessOut hosts the credit card fields on its
servers so no critical data ever touches your server and no XSS impacts your customer's
security. 

```html
<form action="/your-capture-endpoint" method="POST" id="payment-form">
  <div data-processout-input="cc-card"
        data-processout-placeholder="4242 4242 4242 4242"></div>
  <div data-processout-input="cc-exp-month"
        data-processout-placeholder="Expiration month"></div>
  <div data-processout-input="cc-exp-year"
        data-processout-placeholder="Expiration year"></div>

  <div data-processout-input="cc-cvc"
        data-processout-placeholder="CVC"></div>

  <input type="submit" class="submit" value="Submit Payment">
</form>
```

For the payment form to be interactable, you will need to load `ProcessOut.js`. 
It is important to **always** load it from CDN like shown below. Please note that
ProcessOut.js has no dependency, meaning it can work without jQuery.

```html
<script src="https://js.processout.com/processout.js"></script>
```

Now that `ProcessOut.js` is loaded, we can start using it. Let's first
instanciate a new `ProcessOut` instance in a different script tag as soon
as the DOM is fully loaded, and setup our form:

```html
<script type="text/javascript">
  document.addEventListener("DOMContentLoaded", function() {
    var client = new ProcessOut.ProcessOut("proj_vPDoaE0dHoPtsek8SqbwTpgeTN1toazN");
    var formElement = document.getElementById("payment-form");
    client.setupForm(formElement, processoutReadyHandler, function(err) {
      alert("Woops, couldn't setup the form: "+err);
    });
  });
</script>
```

**Note**: Remember to replace the project ID in the example with your own. When testing,
prepend your project ID with `test-` like so: `test-proj_vPDoaE0dHoPtsek8SqbwTpgeTN1toazN`.

We also still have to add the handler, which we'll do just now:

#### Bind the form and tokenize the card

As soon as the form is fully loaded, `setupForm` will call `processoutReadyHandler` 
with the created `CardForm` object. We'll use this object to handle the
tokenization transparently.

Let's bind the form submission and tokenize the card:

```javascript
function processoutReadyHandler(form) {
  // The form is now fully loaded!
  formElement.addEventListener("submit", function(e) {
    // Cancel any default action
    e.preventDefault();

    // Let's tokenize the card
    client.tokenize(form, {}, function(token) {
      // We now have the tokenized card token, let's send it back
      // to the server
      var field   = document.createElement("input");
      field.type  = "hidden";
      field.name  = "token";
      field.value = token;

      // We add the token input so that it's sent back to  the server.
      // The only thing left to do is to submit the form
      formElement.submit();
    }, function(err) {
      alert(err);
    });

    return false;
  });
}
``` 

#### What's next?

We've sent the card token back to our server. Let's use it to 
[capture a payment &nearr;](#) or to [create a subscription &nearr;](#).