---
title: Save token and capture payments later
---

## Save a token to capture future payments

While most e-commerce businesses handle one-off payments, you might need to
ask for a customer's card and capture payments on it in the future (one, but
also several if needed). This is done by tokenizing the card token created
by [`ProcessOut.js` &nearr;](/payments/processoutjs.html).

<hr>

#### Getting started

Because tokens are specifically linked to one of your customers, you must first
create a [`Customer` &nearr;](/refs/index.html#customers) resource.

#### Creating a customer

You can create any number of customer you may need. A customer object may be
entirely empty, but we strongly advise you to fill the object with as much
data as you have. This can help doing searches on your dashboard, but it also
greatly helps us when smart routing transactions related to this customer
and decreases fraud risks. 

The ID of the newly created customer should also be stored in your application
or database so you can use it later.

<div class="language-selector-wrapper">
<%= partial "lg-selector" %>
```shell
curl https://api.processout.com/customers \
    -u proj_OvJdvN73Ds1pecfQez2J13pK1YlRqFh4:key-qiOniTQlt8OazoMrnYJKaSnBhRpWN5Rd \
    -d first_name=John \
    -d last_name=Smith \
    -d currency=USD
```

```javascript
<%= partial "header-js" %>
var customer = client.newCustomer({
    first_name: "John",
    last_name:  "Smith",
    currency:   "USD"
}).create().then(function(customer) {
    //

}, function(err) {
    // An error occured

});
```

```python
<%= partial "header-python" %>
customer = client.newCustomer({
    "first_name": "John",
    "last_name":  "Smith",
    "currency":   "USD"
}).create()
```

```ruby
<%= partial "header-ruby" %>
customer = client.customer.new(
    first_name: "John",
    last_name:  "Smith",
    currency:   "USD"
).create
```

```php
<%= partial "header-php" %>
$customer = $client->newCustomer(array(
    "first_name": "John",
    "last_name":  "Smith",
    "currency":   "USD"
))->create();
```

```go
<%= partial "header-go" %>
cust, err := client.NewCustomer(&processout.Customer{
    FirstName: "John",
    LastName:  "Smith",
    Currency:  "USD",
}).Create()
```
</div>

**Note**: While the currency field is also optionnal, it will be automatically
set to the currency of the first invoice your customer will pay. It is also
immutable.

#### Creating a customer token

Now that we have a customer object to work with, we can create tokens that'll
belong to it. Customer tokens can be created from the ones returned by
[`ProcessOut.js` &nearr;](/payments/processoutjs.html) and can be used any number of time. 

<div class="language-selector-wrapper">
<%= partial "lg-selector" %>
```shell
curl https://api.processout.com/customers/cust_WtaVdUjAGpOlbLiYWYXBR67whr91Rlks \
    -u proj_OvJdvN73Ds1pecfQez2J13pK1YlRqFh4:key-qiOniTQlt8OazoMrnYJKaSnBhRpWN5Rd \
    -d source=card_ZGJ8EnCPfcr298O1wD6u9McfnZQucIv1
```

```javascript
<%= partial "header-js" %>
client.newToken().create("cust_WtaVdUjAGpOlbLiYWYXBR67whr91Rlks", 
    "card_ZGJ8EnCPfcr298O1wD6u9McfnZQucIv1").
        then(function(token) {
            //
        }, function(err) {
            // An error occured creating the token
        });
```

```python
<%= partial "header-python" %>
token = client.newToken().create("cust_WtaVdUjAGpOlbLiYWYXBR67whr91Rlks", 
    "card_ZGJ8EnCPfcr298O1wD6u9McfnZQucIv1")
```

```ruby
<%= partial "header-ruby" %>
token = client.token.create("cust_WtaVdUjAGpOlbLiYWYXBR67whr91Rlks", 
    "card_ZGJ8EnCPfcr298O1wD6u9McfnZQucIv1")
```

```php
<%= partial "header-php" %>
$token = $client->newToken()->create("cust_WtaVdUjAGpOlbLiYWYXBR67whr91Rlks", 
    "card_ZGJ8EnCPfcr298O1wD6u9McfnZQucIv1");
```

```go
<%= partial "header-go" %>
tok, err := client.NewToken().Create("cust_WtaVdUjAGpOlbLiYWYXBR67whr91Rlks", 
    "card_ZGJ8EnCPfcr298O1wD6u9McfnZQucIv1")
```
</div>

#### Capturing a payment for a customer

After having created a customer token, it is possible to capture any invoice
matching the currency of the customer at any point in time, using the ID
of the customer as the source:

<div class="language-selector-wrapper">
<%= partial "lg-selector" %>
```shell
curl https://api.processout.com/invoices/iv_lEZFFcQg5WwpKcolBrlzioeeFnnuPmyE/capture \
    -u proj_OvJdvN73Ds1pecfQez2J13pK1YlRqFh4:key-qiOniTQlt8OazoMrnYJKaSnBhRpWN5Rd \
    -d source=cust_WtaVdUjAGpOlbLiYWYXBR67whr91Rlks
```

```javascript
<%= partial "header-js" %>
invoice.capture("cust_WtaVdUjAGpOlbLiYWYXBR67whr91Rlks").then(
    function(transaction) {
        // 

    }, function(err) {
        // The invoice could not be captured
    });
```

```python
<%= partial "header-python" %>
transaction = invoice.capture("cust_WtaVdUjAGpOlbLiYWYXBR67whr91Rlks")
```

```ruby
<%= partial "header-ruby" %>
transaction = invoice.capture("cust_WtaVdUjAGpOlbLiYWYXBR67whr91Rlks")
```

```php
<%= partial "header-php" %>
$transaction = $invoice->capture("cust_WtaVdUjAGpOlbLiYWYXBR67whr91Rlks");
```

```go
<%= partial "header-go" %>
tr, _ := iv.Capture("cust_WtaVdUjAGpOlbLiYWYXBR67whr91Rlks")
```
</div>

Using the customer ID as the source to capture a payment will automatically select
the best token the customer has to process the payment. However, if you'd rather
use a specific token, you can too:

<div class="language-selector-wrapper">
<%= partial "lg-selector" %>
```shell
curl https://api.processout.com/invoices/iv_lEZFFcQg5WwpKcolBrlzioeeFnnuPmyE/capture \
    -u proj_OvJdvN73Ds1pecfQez2J13pK1YlRqFh4:key-qiOniTQlt8OazoMrnYJKaSnBhRpWN5Rd \
    -d source=tok_aKrYfz903uXn9MV0p8ZH7Lfly2JGtZWh
```

```javascript
<%= partial "header-js" %>
invoice.capture("tok_aKrYfz903uXn9MV0p8ZH7Lfly2JGtZWh").then(
    function(transaction) {
        // 

    }, function(err) {
        // The invoice could not be captured
    });
```

```python
<%= partial "header-python" %>
transaction = invoice.capture("tok_aKrYfz903uXn9MV0p8ZH7Lfly2JGtZWh")
```

```ruby
<%= partial "header-ruby" %>
transaction = invoice.capture("tok_aKrYfz903uXn9MV0p8ZH7Lfly2JGtZWh")
```

```php
<%= partial "header-php" %>
$transaction = $invoice->capture("tok_aKrYfz903uXn9MV0p8ZH7Lfly2JGtZWh");
```

```go
<%= partial "header-go" %>
tr, _ := iv.Capture("tok_aKrYfz903uXn9MV0p8ZH7Lfly2JGtZWh")
```
</div>

#### Listing and deleting customers' tokens

Once you've stored a token for a customer, you might want to list them
so you can show them to your customers, or delete them when your customers
want to remove the payment method.

<div class="language-selector-wrapper">
<%= partial "lg-selector" %>
```shell
curl https://api.processout.com/customers/cust_WtaVdUjAGpOlbLiYWYXBR67whr91Rlks/tokens \
    -u proj_OvJdvN73Ds1pecfQez2J13pK1YlRqFh4:key-qiOniTQlt8OazoMrnYJKaSnBhRpWN5Rd
```

```javascript
<%= partial "header-js" %>
customer.fetchTokens().then(
    function(tokens) {
        // 

    }, function(err) {
        // The customer's tokens could not be fetched
    });
```

```python
<%= partial "header-python" %>
tokens = customer.fetchTokens()
```

```ruby
<%= partial "header-ruby" %> 
tokens = customer.fetch_tokens()
```

```php
<%= partial "header-php" %>
$tokens = $customer->fetchTokens();
```

```go
<%= partial "header-go" %>
tok, _ := cust.FetchTokens()
```
</div>