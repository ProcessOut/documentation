## Customers

Customers contain data related to your customers. You can store their name, email
and address, but there's also a metadata field that can be used to store 
additional data if needed.

##### Attributes
|||
--:|:--
**id**<br />*string*<br />Read-only |
**email**<br />*string* | Customer's email
**first_name**<br />*string* |
**last_name**<br />*string* |
**address1**<br />*string* |
**address2**<br />*string* |
**city**<br />*string* |
**state**<br />*string* |
**zip**<br />*string* |
**country_code**<br />*string* | Customer's address country code (ex: `US`, `FR`)
**metadata**<br />[Metadata](#metadata)<br />*dictionary* | Context related to the customer, key-value pair (string => string)
**sandbox**<br />*boolean*<br />Read-only |

### Create a customer

```javascript
<%= partial "header-js" %>
var customer = new ProcessOut.Customer();
customer.setEmail('john@smith.com');
customer.setFirstName('John');
customer.setLastName('Smith');

customer.create().then(function(customer) {
    console.log(customer.getId());

}, function(err) {
    // An error occured

});
```

```python
<%= partial "header-python" %>
customer = processout.Customer()
customer.email = 'john@smith.com'
customer.firstName = 'John'
customer.lastName = 'Smith'

customer = customer.create()
print(customer.id)
```

```php
<%= partial "header-php" %>
$customer = new \ProcessOut\Customer();
$customer->setEmail('john@smith.com');
$customer->setFirstName('John');
$customer->setLastName('Smith');

$customer = $customer->create();
echo $customer->getId();
```

```go
<%= partial "header-go" %>
cust, err := client.Customers.Create(&processout.Customer{
	FirstName: "John",
	LastName:  "Smith",
	Email:     "john@smith.com",
})
fmt.Println(cust.ID)
```

Create a new customer.

Once the customer is created, ProcessOut will return its resource `ID`.
Storing this information on your backend may be useful if you want to
easily find which ProcessOut Customer belongs to which of your internal
users.

It is also possible to store metadata in your ProcessOut customers. Said
metadata could be anything, from the ID of the user in your systems to the
country of the customer.

### Fetch a customer

```javascript
<%= partial "header-js" %>
ProcessOut.Customer.find("cust_UVYZP5I5741rFHQDEZXGLm777fCZzQAb").then(
    function(customer) {
        // Customer was fetched
    }, function(err) {
        // An error occured
    });
```

```python
<%= partial "header-python" %>
customer = processout.Customer.find("cust_UVYZP5I5741rFHQDEZXGLm777fCZzQAb")
```

```php
<%= partial "header-php" %>
$customer = \ProcessOut\Customer::find("cust_UVYZP5I5741rFHQDEZXGLm777fCZzQAb");
```

```go
<%= partial "header-go" %>
cust, err := client.Customers.Find("cust_UVYZP5I5741rFHQDEZXGLm777fCZzQAb")
```

It is possible to fetch a customer by its ID. An error is thrown if the 
customer could not be found.

### Update a customer

```javascript
<%= partial "header-js" %>
customer.setFirstName("New name");
customer.save();
```

```python
<%= partial "header-python" %>
customer.firstName = "New name"
customer.save()
```

```php
<%= partial "header-php" %>
$customer->setFirstName("New name");
$customer->save();
```

```go
<%= partial "header-go" %>
cust.FirstName = "New name"
client.Customers.Save(cust)
```

Update the customer attributes. You must use a previously created or fetched
customer object in order to guarantee data integrity of the customer object.

### Delete a customer

```javascript
<%= partial "header-js" %>
ProcessOut.Customer.find("cust_LvjCcLOVe6iWn2aeCNhNmK7RbbG6K8XF").then(
    function(customer) {
        customer.delete();
    }, function() {});
```

```python
<%= partial "header-python" %>
customer = processout.Customer.find("cust_LvjCcLOVe6iWn2aeCNhNmK7RbbG6K8XF")
customer.delete()
```

```php
<%= partial "header-php" %>
$customer = \ProcessOut\Customer::find("cust_LvjCcLOVe6iWn2aeCNhNmK7RbbG6K8XF");
$customer->delete();
```

```go
<%= partial "header-go" %>
client.Customers.Delete(&processout.Customer{
    ID: "cust_LvjCcLOVe6iWn2aeCNhNmK7RbbG6K8XF",
})
```

Deleting a customer is irreversible and cannot be undone. An error is thrown
if the customer could not be deleted.