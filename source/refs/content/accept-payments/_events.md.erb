## Events

When a resource's state changes, ProcessOut will create an `Event` object which can
be programmatically fetched. This can be used to notify your application
when a transaction gets completed, or when a subscription iterates to its next
period, but can also have many other possible applications.

You can find all the events we currently fire [here](#events-data).

It is also important to note that events are extremely powerful when they're
coupled with [webhooks](#webhooks). As soon as an event is created, we'll send
a request to your web application to notify you of this new event so it can
fetched and processed.

##### Attributes
|||
--:|:--
**id**<br />*string*<br />Read-only |
**name**<br />*string*<br />Read-only | Name of the event corresponding to the action
**data**<br />*json object*<br />Read-only | Data linked to the event
**fired_at**<br />*timestamp*<br />Read-only |
**sandbox**<br />*boolean*<br />Read-only |


### Fetch an event

```javascript
<%= partial "header-js" %>
ProcessOut.Event.find("ev_T3wg9169RyGLnf1BIgTjLhrolEZU1DSb").then(
    function(event) {
        // We may now access the event

    }, function(err) {
        // An error occured

    });
```

```python
<%= partial "header-python" %>
event = Event.find("ev_T3wg9169RyGLnf1BIgTjLhrolEZU1DSb")
```

```php
<%= partial "header-php" %>
$event = ProcessOut\Event::find("ev_T3wg9169RyGLnf1BIgTjLhrolEZU1DSb");
```

```go
<%= partial "header-go" %>
ev, err := p.Events.Find("ev_T3wg9169RyGLnf1BIgTjLhrolEZU1DSb")
```

Fetch an event by its ID. An error is thrown when the event could not be found.


### Invoice events

The invoice events are created when an update regarding an [invoice](#invoices)
occurs.

##### Events
|||
--:|:--
invoice.waiting | No payment has been placed yet
invoice.pending | The payment is pending confirmation by the payment gateway
invoice.completed | The payment was sucessfully completed
invoice.failed | The payment has been placed, but failed
invoice.disputed | The payment was previously completed but the customer filled a dispute
invoice.solved | The previous dispute has been resolved in your favor
invoice.reversed | The previous dispute has been resolved in your customer's favor
invoice.refunded | You refunded the transaction

### Subscription events

The subscription/recurring invoice events are created when an update regarding
a [subscription](#subscriptions) occurs.

*Note:* When a recurring-invoice/subscription iterates, a new [invoice](#invoices)
and its associated [transaction](#transactions) will be created and  marked as
completed, and its corresponding event will also be sent.

##### Events
|||
--:|:--
subscription.started | The subscription started
subscription.iterated | The customer paid for the current iteration of its subscription
subscription.trial_ended | The subscription trial ended
subscription.payment_failed | The payment of the current subscription period failed
subscription.canceled | The customer's subscription was canceled <br />*Note:* It might have been canceled because the payment gateway refused your customer's payment (ex: when the credit card expired). The reason of the cancellation is available in the `cancellation_reason` attribute of the subscription

