<div id="accept-payments-category"></div>

## Invoices

An invoice is the core resource for a merchant who wants to accept payments online
using the ProcessOut API. To start using invoices, [let's create one](#create-an-invoice).

##### Attributes
|||
--:|:--
**id**<br />*string*<br />Read-only |
**url**<br />*string*<br />Read-only | `URL` to the ProcessOut checkout page
**customer**<br />*[Customer](#customers)*<br />Read-only |
**name**<br />*string*<br /><span class="highlighted">Required</span> | Name of the invoice/item to sell
**amount**<br />*string*<br /><span class="highlighted">Required</span> | Amount to be paid
**currency**<br />*string*<br /><span class="highlighted">Required</span> | Currency of the invoice, in the ISO 4217 format (ex: `USD`)
**return_url**<br />*string* | `URL` used to redirect the customer once the payment is placed
**cancel_url**<br />*string* | `URL` used to redirect the customer when the payment is canceled |ProcessOut cancelation landing page
**metadata**<br />[Metadata](#metadata)<br />*dictionary* | Context related to the invoice, key-value pair (string => string)
**sandbox**<br />*boolean*<br />Read-only |

### Create an invoice

```javascript
// Create a new invoice
var invoice = new ProcessOut.Invoice();
invoice.setName('Amazing item');
invoice.setAmount('4.99');
invoice.setCurrency('USD');
// You may set any field listed in table on the right pane

// Push it to ProcessOut
// The ProcessOut NodeJS library uses promises to return objects
invoice.create().then(function(invoice) {
    // invoice is our newly created resource

}, function(err) {
    // An error occured

});
```

```python
from processout.invoice import Invoice

# Create a new invoice
invoice          = Invoice()
invoice.name     = 'Amazing item'
invoice.amount   = '4.99'
invoice.currency = 'USD'
# You may set any field listed in table on the right pane

# Push it to ProcessOut. Create returns a new invoice instance
invoice = invoice.create()
```

```php
<?php
// Create a new invoice
$invoice = new \ProcessOut\Invoice();
$invoice
    ->setName('Amazing item')
    ->setAmount('4.99')
    ->setCurrency('USD');
// You may set any field listed in table on the right pane

// Push it to ProcessOut. Create returns a new invoice instance
$invoice = $invoice->create();
```

```go
iv, err := p.Invoices.Create(&processout.Invoice{
	Name:     "Amazing item",
	Amount:   "4.99",
	Currency: "USD",
})
```

Creating an invoice for your customers can be done on your server's backend.
Simply create an Invoice resource with a `name`, `amount` and `currency`.

Now that you have created an invoice, your customers can interact with it to
pay you using below's available payment options. Before doing so, you might
also want to store more information regarding your customer. This can be done
using our [Customer object](#customers).

##### What's next
<div class="table">
    <div class="table-tr text1-1em">
        <div class="table-td" width="50%">
            <a href="#hosted-payment-pages">Hosted payment page &rsaquo;</a>
            <p class="content">
                Accept payments online with your gateways.
            </p>
        </div>
        <div class="table-td">
            <a href="#subscriptions-category">ProcessOut.js &amp; API &rsaquo;</a>
            <p>
                Manage recurring billing for your busines.
            </p>
        </div>
    </div>
</div>
