<div id="accept-payments-category"></div>

## Invoices

An invoice is the core resource for a merchant who wants to accept payments online
using the ProcessOut API. To start using invoices, [let's create one](#create-an-invoice).

##### Attributes
|||
--:|:--
**id**<br />*string*<br />Read-only |
**url**<br />*string*<br />Read-only | `URL` to the ProcessOut checkout page
**customer**<br />*[Customer](#customers)*<br />Read-only |
**transaction**<br />*[Transaction](#transactions)*<br />Read-only |
**subscription**<br />*[Subscription](#subscriptions)*<br />Read-only |
**name**<br />*string*<br /><span class="highlighted">Required</span> | Name of the invoice/item to sell
**amount**<br />*string*<br /><span class="highlighted">Required</span> | Amount to be paid
**currency**<br />*string*<br /><span class="highlighted">Required</span> | Currency of the invoice, in the ISO 4217 format (ex: `USD`)
**return_url**<br />*string* | `URL` used to redirect the customer once the payment is placed
**cancel_url**<br />*string* | `URL` used to redirect the customer when the payment is canceled |ProcessOut cancelation landing page
**metadata**<br />[Metadata](#metadata)<br />*dictionary* | Context related to the invoice, key-value pair (string => string)
**sandbox**<br />*boolean*<br />Read-only |

### Create an invoice

```javascript
<%= partial "header-js" %>
var invoice = new ProcessOut.Invoice();
invoice.setName('Amazing item');
invoice.setAmount('4.99');
invoice.setCurrency('USD');

invoice.create().then(function(invoice) {
    // invoice is our newly created resource

}, function(err) {
    // An error occured

});
```

```python
<%= partial "header-python" %>
invoice          = processout.Invoice()
invoice.name     = 'Amazing item'
invoice.amount   = '4.99'
invoice.currency = 'USD'

invoice = invoice.create()
```

```php
<%= partial "header-php" %>
$invoice = new \ProcessOut\Invoice();
$invoice
    ->setName('Amazing item')
    ->setAmount('4.99')
    ->setCurrency('USD');

$invoice = $invoice->create();
```

```go
<%= partial "header-go" %>
iv, err := p.Invoices.Create(&processout.Invoice{
	Name:     "Amazing item",
	Amount:   "4.99",
	Currency: "USD",
})
```

Creating an invoice for your customers can be done on your server's backend.
Simply create an Invoice resource with a `name`, `amount` and `currency`.

### Fetch an invoice

```javascript
<%= partial "header-js" %>
ProcessOut.Invoice.find("iv_MgeLS2Rr3ZGwjqOvDvYSuWx7ce88luXl").then(
    function(invoice) {
        // The invoice was fetched

    }, function(err) {
        // The invoice could not be found
    });
```

```python
<%= partial "header-python" %>
invoice = Invoice.find("iv_MgeLS2Rr3ZGwjqOvDvYSuWx7ce88luXl")
```

```php
<%= partial "header-php" %>
$invoice = \ProcessOut\Invoice::find("iv_MgeLS2Rr3ZGwjqOvDvYSuWx7ce88luXl");
```

```go
<%= partial "header-go" %>
iv, err := client.Invoices.Find("iv_MgeLS2Rr3ZGwjqOvDvYSuWx7ce88luXl")
```

Invoices can be fetched from ProcessOut by using their IDs. If the invoice
could not be found, an error is thrown.

### Assign a customer

```javascript
<%= partial "header-js" %>
invoice.assignCustomer("cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P");
```

```python
<%= partial "header-python" %>
invoice.assignCustomer("cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P")
```

```php
<%= partial "header-php" %>
$invoice->assignCustomer("cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P");
```

```go
<%= partial "header-go" %>
processout.Invoices.AssignCustomer(iv, "cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P")
```

It is also possible to assign a customer to an invoice that was previously created.
This can help track orders related to your customers.

A customer's invoice is immutable, meaning that once it is set it cannot be changed.
If you'd like to link another customer to the invoice, you will need to create
a new invoice.

### Capture an invoice

```javascript
<%= partial "header-js" %>
invoice.capture("card_1jSEVrx7oaRta1KEdxoMWbiGkK2MijrZ").then(
    function(transaction) {
        // The invoice was captured and returned a transaction

    }, function(err) {
        // The invoice could not be captured
    });
```

```python
<%= partial "header-python" %>
transaction = invoice.capture("card_1jSEVrx7oaRta1KEdxoMWbiGkK2MijrZ")
```

```php
<%= partial "header-php" %>
$transaction = $invoice->capture("card_1jSEVrx7oaRta1KEdxoMWbiGkK2MijrZ");
```

```go
<%= partial "header-go" %>
tr, _ := processout.Invoices.Capture(iv,
    "card_1jSEVrx7oaRta1KEdxoMWbiGkK2MijrZ")
```

Capturing an invoice is done by calling `capture` on the invoice and passing
the `source` to be used to capture the payment in the parameters. If an error
occured while capturing the payment, an error is thrown. Otherwise, the
transaction linked to the invoice is updated and returned.

Be sure to check the [status](#statuses) field of the [Transaction](#transactions)
to make sure the payment fully made it through. If the payment is not yet
completed, we will create new [Events](#events) to keep you updated regarding the status
of the transaction.