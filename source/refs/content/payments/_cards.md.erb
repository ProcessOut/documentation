## Cards

Cards resources are card objects created using [ProcessOut.js](/payments/processoutjs).
A card object is an immutable object that should only be used once. Once the card
has been used to capture a payment or create a customer token, the 
card object may not be used anymore. 

For this reason, if you wish to capture
several payments using the card (at once or in the future), you must create 
a [customer token](#tokens).

ProcessOut will also fire [events](#events) when a card is going to expire so that you 
can ask your customers to update their payment details.

##### Attributes
|||
--:|:--
<span class="console-font">**id**</span><br />*string*<br />Read-only |
<span class="console-font">**token**</span><br />*[Token](#tokens) expandable* | Token created using this card object, if any
<span class="console-font">**scheme**</span><br />*string*<br />Read-only | Scheme of the card, such as Visa or Mastercard
<span class="console-font">**type**</span><br />*string*<br />Read-only | Type of card, such as debit or credit
<span class="console-font">**bank_name**</span><br />*string*<br />Read-only | Card issuing bank
<span class="console-font">**brand**</span><br />*string*<br />Read-only | Brand of the card, such as Electron, Classic or Gold
<span class="console-font">**iin**</span><br />*string*<br />Read-only | Issuer identification number. Corresponds to first 6 digits of the card
<span class="console-font">**last_4_digits**</span><br />*string*<br />Read-only | Last 4 digits of the card
<span class="console-font">**exp_month**</span><br />*integer*<br />Read-only | Expiry year of the card
<span class="console-font">**exp_year**</span><br />*string*<br />Read-only | Expiry year of the card
<span class="console-font">**cvc_check**</span><br />*string*<br />Read-only | CVC check status. Can be `pending`, `unavailable`, `unknown`, `failed`, or `passed`
<span class="console-font">**avs_check**</span><br />*string*<br />Read-only | AVS check status. Can be `pending`, `unavailable`, `unknown`, `failed`, `failed-name`, `failed-address`, `failed-postal`, `failed-address-passed-postal`, `failed-postal-passed-address`, or `passed`
<span class="console-font">**name**</span><br />*string* | Cardholder name<br /><span style="opacity: 0.5">*Max 255 characters long*</span>
<span class="console-font">**contact**</span><br />*CardContact* | Card contact attributes
<span class="console-font">**metadata**</span><br />[Metadata](#metadata)<br />*dictionary* | Context related to the card, key-value pair (string - string)
<span class="console-font">**sandbox**</span><br />*boolean*<br />Read-only |
<span class="console-font">**created_at**</span><br />*RFC1123 date or timestamp*<br />Read-only |

##### Card contact Attributes
|||
--:|:--
<span class="console-font">**address1**</span><br />*string* | Cardholder primary address line<br /><span style="opacity: 0.5">*Max 255 characters long*</span>
<span class="console-font">**address2**</span><br />*string* | Cardholder secondary address line<br /><span style="opacity: 0.5">*Max 255 characters long*</span>
<span class="console-font">**city**</span><br />*string* | Cardholder city<br /><span style="opacity: 0.5">*Max 255 characters long*</span>
<span class="console-font">**state**</span><br />*string* | Cardholder state<br /><span style="opacity: 0.5">*Max 255 characters long*</span>
<span class="console-font">**country_code**</span><br />*string* | Cardholder country<br /><span style="opacity: 0.5">*Must be a valid ISO 3166 2 characters country code*</span>
<span class="console-font">**zip**</span><br />*string* | Cardholder zip<br /><span style="opacity: 0.5">*Max 16 characters long*</span>

### Tokenize a card

```shell
curl -X POST https://api.processout.com/cards \
    <%= partial "header-curl" %> \
    -d name="John Smith" \
    -d number=4242424242424242 \
    -d exp_month=12 \
    -d exp_year=2020 \
    -d cvc2=200
```

```javascript
// NodeJS is currently not supported for Cards (please use ProcessOut.js instead)
```

```python
<%= partial "header-python" %>
# Python is currently not supported for Cards
```

```ruby
<%= partial "header-ruby" %>
# Ruby is currently not supported for Cards
```

```php
<%= partial "header-php" %>
// PHP is currently not supported for Cards
```

```go
<%= partial "header-go" %>
// Go is currently not supported for Cards
```

Tokenizing a card on ProcessOut can be done using the Cards endpoint. It is most
useful to merchants already PCI compliant. However, for most merchants and 
use-cases we strongly advise to use our ProcessOut.js and mobile SDKs to 
tokenize the cards, as these SDKs allow you to remove the need for complexe
card data certifications (PCI-DSS).

### Fetch a card

```shell
curl -X GET https://api.processout.com/cards/card_1jSEVrx7oaRta1KEdxoMWbiGkK2MijrZ \
    <%= partial "header-curl" %>
```

```javascript
<%= partial "header-js" %>
client.newCard().find("card_1jSEVrx7oaRta1KEdxoMWbiGkK2MijrZ").then(
    function(card) {
        //
    }, function(err) {
        // An error occured
    });
```

```python
<%= partial "header-python" %>
card = client.new_card().find("card_1jSEVrx7oaRta1KEdxoMWbiGkK2MijrZ")
```

```ruby
<%= partial "header-ruby" %>
card = client.card.find("card_1jSEVrx7oaRta1KEdxoMWbiGkK2MijrZ")
```

```php
<%= partial "header-php" %>
$card = $client->newCard()->find("card_1jSEVrx7oaRta1KEdxoMWbiGkK2MijrZ");
```

```go
<%= partial "header-go" %>
card, err := client.NewCard().Find("card_1jSEVrx7oaRta1KEdxoMWbiGkK2MijrZ")
```

Retrieve a card to fetch data stored earlier during a tokenization call.

This API endpoint can also be used to **detokenize** a card if you own a PCI
environment. Please talk to your ProcessOut account manager to learn more!


