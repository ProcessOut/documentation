## Customers

Customers contain data related to your customers. You can store their name, email
and address, but there's also a metadata field that can be used to store 
additional data if needed.

##### Attributes
|||
--:|:--
<span class="console-font">**id**</span><br />*string*<br />Read-only |
<span class="console-font">**default_token**</span><br />*default_token_id*<br />*[Token](#tokens) expandable* | Default token of the customer, used when charging directly using the customer ID as the source
<span class="console-font">**tokens**</span><br />*list of [Tokens](#tokens) expandable* | Tokens belonging to the customer (can be cards or other payment methods)
<span class="console-font">**subscriptions**</span><br />*list of [Subscriptions](#subscriptions) expandable* | Subscriptions belonging to the customer (in any subscription state)
<span class="console-font">**transactions**</span><br />*list of [Transactions](#transactions) expandable* | Transactions belonging to the customer (can be any transaction state)
<span class="console-font">**balance**</span><br />*string* | Balance of the customer. This field is only used by the internal subscriptions engine to compute charges for plan changes- in most cases, do not update this field yourself
<span class="console-font">**currency**</span><br />*string* | Currency of the customer balance- mostly automatically set by the internal subscriptions engine. Once set, it cannot be changed
<span class="console-font">**email**</span><br />*string* | Customer's email<br /><span style="opacity: 0.5">*Must be a valid email*</span>
<span class="console-font">**first_name**</span><br />*string* | First name of the customer<br /><span style="opacity: 0.5">*Max 80 characters long*</span>
<span class="console-font">**last_name**</span><br />*string* | Last name of the customer<br /><span style="opacity: 0.5">*Max 80 characters long*</span>
<span class="console-font">**address1**</span><br />*string* | Primary address line of the customer<br /><span style="opacity: 0.5">*Max 80 characters long*</span>
<span class="console-font">**address2**</span><br />*string* | Secondary address line of the customer<br /><span style="opacity: 0.5">*Max 80 characters long*</span>
<span class="console-font">**city**</span><br />*string* | City of the customer<br /><span style="opacity: 0.5">*Max 80 characters long*</span>
<span class="console-font">**state**</span><br />*string* | State of the customer<br /><span style="opacity: 0.5">*Max 80 characters long*</span>
<span class="console-font">**zip**</span><br />*string* | ZIP code of the customer<br /><span style="opacity: 0.5">*Max 16 characters long*</span>
<span class="console-font">**country_code**</span><br />*string* | Customer's address country code (ex: `US`, `FR`)<br /><span style="opacity: 0.5">*Must be a valid ISO 3166 2 characters country code*</span>
<span class="console-font">**phone_number**</span><br />*string* | Phone number of the customer<br /><span style="opacity: 0.5">*Max 16 characters long*</span>
<span class="console-font">**legal_document**</span><br />*string* | Legal document number. Required in some countries<br /><span style="opacity: 0.5">*Max 255 characters long; example for a CPF document in Brazil: 853.513.468-93*</span>
<span class="console-font">**ip_address**</span><br />*string* | IP address of the customer<br /><span style="opacity: 0.5">*Must be a valid IP address*</span>
<span class="console-font">**sex**</span><br />*string* | Sex of the customer. Can be `male` or `female`.
<span class="console-font">**is_business**</span><br />*boolean* | Define whether or not the customer is a business
<span class="console-font">**metadata**</span><br />[Metadata](#metadata)<br />*dictionary* | Context related to the customer, key-value pair (string - string)
<span class="console-font">**registered_at**</span><br />*RFC1123 date or timestamp* | Date at which the customer was registered on your platform. Will default to `created_at` if empty.
<span class="console-font">**sandbox**</span><br />*boolean*<br />Read-only |
<span class="console-font">**created_at**</span><br />*RFC1123 date or timestamp*<br />Read-only |

### Create a customer

```shell
curl -X POST https://api.processout.com/customers \
    <%= partial "header-curl" %> \
    -d email="john@smith.com" \
    -d first_name="John" \
    -d last_name="Smith"
```

```javascript
<%= partial "header-js" %>
var customer = client.newCustomer().create({
    "email":      "john@smith.com",
    "first_name": "John",
    "last_name":  "Smith"
}).then(function(customer) {
    //

}, function(err) {
    // An error occured

});
```

```python
<%= partial "header-python" %>
customer = client.new_customer().create({
    "email":      "john@smith.com",
    "first_name": "John",
    "last_name":  "Smith"
})
```

```ruby
<%= partial "header-ruby" %>
customer = client.customer.create(
    email:      "john@smith.com",
    first_name: "John",
    last_name:  "Smith"
)
```

```php
<%= partial "header-php" %>
$customer = $client->newCustomer()->create(array(
    "email"      => "john@smith.com",
    "first_name" => "John",
    "last_name"  => "Smith"
));
```

```go
<%= partial "header-go" %>
cust, err := client.NewCustomer().Create(processout.CustomerCreateParameters{
    Customer: &processout.Customer{
        Email:     processout.String("john@smith.com"),
        FirstName: processout.String("John"),
        LastName:  processout.String("Smith"),
    },
})
```

Once the customer is created, ProcessOut will return its resource `ID`.
Storing this information on your backend may be useful if you want to
easily find which ProcessOut Customer belongs to which of your internal
users.

It is also possible to store metadata in your ProcessOut customers. Said
metadata could be anything, from the ID of the user in your systems to the
country of the customer.

### Fetch a customer

```shell
curl -X GET https://api.processout.com/customers/cust_UVYZP5I5741rFHQDEZXGLm777fCZzQAb \
    <%= partial "header-curl" %>
```

```javascript
<%= partial "header-js" %>
client.newCustomer().find("cust_UVYZP5I5741rFHQDEZXGLm777fCZzQAb").then(
    function(customer) {
        //
    }, function(err) {
        // An error occured
    });
```

```python
<%= partial "header-python" %>
customer = client.new_customer().find("cust_UVYZP5I5741rFHQDEZXGLm777fCZzQAb")
```

```ruby
<%= partial "header-ruby" %>
customer = client.customer.find("cust_UVYZP5I5741rFHQDEZXGLm777fCZzQAb")
```

```php
<%= partial "header-php" %>
$customer = $client->newCustomer()->find("cust_UVYZP5I5741rFHQDEZXGLm777fCZzQAb");
```

```go
<%= partial "header-go" %>
cust, err := client.NewCustomer().Find("cust_UVYZP5I5741rFHQDEZXGLm777fCZzQAb")
```

It is possible to fetch a customer by its ID. An error is thrown if the 
customer could not be found.

### Update a customer

```shell
curl -X PUT https://api.processout.com/customers/cust_UVYZP5I5741rFHQDEZXGLm777fCZzQAb \
    <%= partial "header-curl" %> \
    -d first_name="New Name"
```

```javascript
<%= partial "header-js" %>
customer.setFirstName("New name");
customer.save();
```

```python
<%= partial "header-python" %>
customer.first_name = "New name"
customer.save()
```

```ruby
<%= partial "header-ruby" %>
customer.first_name = "New name"
customer.save
```

```php
<%= partial "header-php" %>
$customer->setFirstName("New name");
$customer->save();
```

```go
<%= partial "header-go" %>
cust.FirstName = processout.String("New name")
cust.Save()
```

Update the customer attributes. You must use a previously created or fetched
customer object in order to guarantee data integrity of the customer object.

### Delete a customer

```shell
curl -X DELETE https://api.processout.com/customers/cust_LvjCcLOVe6iWn2aeCNhNmK7RbbG6K8XF \
    <%= partial "header-curl" %>
```

```javascript
<%= partial "header-js" %>
client.newCustomer({
    id: "cust_LvjCcLOVe6iWn2aeCNhNmK7RbbG6K8XF"
}).delete().then(
    function(ok) {
        //
    }, function() {});
```

```python
<%= partial "header-python" %>
customer = client.new_customer({
    "id": "cust_LvjCcLOVe6iWn2aeCNhNmK7RbbG6K8XF"
}).delete()
```

```ruby
<%= partial "header-ruby" %>
customer = client.customer(
    id: "cust_LvjCcLOVe6iWn2aeCNhNmK7RbbG6K8XF"
).delete
```

```php
<%= partial "header-php" %>
$customer = $client->newCustomer(array(
    "id" => "cust_LvjCcLOVe6iWn2aeCNhNmK7RbbG6K8XF"
))->delete();
```

```go
<%= partial "header-go" %>
cust, _ := client.NewCustomer(&processout.Customer{
    ID: processout.String("cust_LvjCcLOVe6iWn2aeCNhNmK7RbbG6K8XF"),
}).Delete()
```

Deleting a customer is irreversible and cannot be undone. An error is thrown
if the customer could not be deleted.
