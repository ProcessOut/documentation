## Events

> Below is an example of the content of the `data` field of an event.

```json
{  
    "name":"invoice.completed",
    "sandbox":false,
    "invoice":{  
        "id":"proj_OvJdvN73Ds1pecfQez2J13pK1YlRqFh4",
        "project":{  
            "id":"proj_wk9E5C94dOuIcDCe0stqjTJgHmczHaKp",
            "name":"App Group LIMITED",
            "email":"sales@appgrouplimited.com",
            "default_currency":"USD",
            "created_at":"2016-05-06T20:45:45Z"
        },
        "subscription":null,
        "customer":{  
            "id":"cust_74qLxAbCpEYOxiBBwXTPKTP4QgTstude",
            "balance":"0",
            "currency":"USD",
            "email":"john@gmail.com",
            "first_name":"",
            "last_name":"",
            "address1":"",
            "address2":"",
            "city":"",
            "state":"",
            "zip":"",
            "country_code":"",
            "metadata":{},
            "sandbox":false,
            "created_at":"2016-11-05T13:05:47.963398Z",
            "transactions_count":1,
            "subscriptions_count":0,
            "mrr_local":0,
            "total_revenues_local":22.99
        },
        "transaction":{  
            "id":"tr_G5HiwMqKmrO8RDGlR8x6zfeDAssZnl8Q",
            "name":"T-Shirt Size M",
            "currency":"USD",
            "buyer":{  
                "name":"",
                "email":"",
                "address":"",
                "phone":""
            },
            "metadata":{},
            "processout_fee":"0",
            "sandbox":false,
            "created_at":"2016-11-05T13:05:27.236141Z",
            "amount":"22.99",
            "amount_local":"22.99",
            "authorized_amount":"22.99",
            "authorized_amount_local":"22.99",
            "captured_amount":"22.99",
            "captured_amount_local":"22.99",
            "available_amount":"22.99",
            "available_amount_local":"22.99",
            "refunded_amount":"0",
            "refunded_amount_local":"0",
            "status":"completed",
            "gateway_fee":"2.4",
            "gateway_fee_local":"2.4",
            "gateway_name":"paypalexpresscheckout",
            "authorized":true,
            "captured":true
        },
        "name":"T-Shirt Size M",
        "price":"22.99",
        "total":"22.99",
        "currency":"USD",
        "request_email":true,
        "request_shipping":false,
        "return_url":"https://sales.appgrouplimited.com",
        "cancel_url":null,
        "sandbox":false,
        "url":"https://checkout.processout.com/iv_...",
        "created_at":"2016-11-05T13:05:27.136003Z"
    }
}
```

When a resource's state changes, ProcessOut will create an `Event` object which can
be programmatically fetched. This can be used to notify your application
when a transaction gets completed, or when a subscription iterates to its next
period, but can also have many other possible applications.

You can find all the events we currently fire [here](#events-data).

It is also important to note that events are extremely powerful when they're
coupled with [webhooks](#webhooks). As soon as an event is created, we'll send
a request to your web application to notify you of this new event so it can
fetched and processed.

**You may find on the right pane an example of what the content of the `data` field
might look like.** The data is basically composed of the object the event describes
at the top level, and this object has its first level resources expanded (when
available). If you wish to access deeper resources, you will need to fetch those
from the API.

##### Attributes
|||
--:|:--
**id**<br />*string*<br />Read-only |
**name**<br />*string*<br />Read-only | Name of the event corresponding to the action
**data**<br />*json object*<br />Read-only | Data linked to the event
**fired_at**<br />*timestamp*<br />Read-only |
**sandbox**<br />*boolean*<br />Read-only |


### Fetch an event

```shell
curl https://api.processout.com/events/ev_T3wg9169RyGLnf1BIgTjLhrolEZU1DSb \
    -u proj_OvJdvN73Ds1pecfQez2J13pK1YlRqFh4:key-qiOniTQlt8OazoMrnYJKaSnBhRpWN5Rd
```

```javascript
<%= partial "header-js" %>
client.newEvent().find("ev_T3wg9169RyGLnf1BIgTjLhrolEZU1DSb").then(
    function(event) {
        // We may now access the event

    }, function(err) {
        // An error occured

    });
```

```python
<%= partial "header-python" %>
event = client.newEvent().find("ev_T3wg9169RyGLnf1BIgTjLhrolEZU1DSb")
```

```ruby
<%= partial "header-ruby" %>
event = client.event.find("ev_T3wg9169RyGLnf1BIgTjLhrolEZU1DSb")
```

```php
<%= partial "header-php" %>
$event = $client->newEvent()->find("ev_T3wg9169RyGLnf1BIgTjLhrolEZU1DSb");
```

```go
<%= partial "header-go" %>
ev, err := client.NewEvent().Find("ev_T3wg9169RyGLnf1BIgTjLhrolEZU1DSb")
```

Fetch an event by its ID. An error is thrown when the event could not be found.


### Invoice events

The invoice events are created when an update regarding an [invoice](#invoices)
occurs.

##### Events
|||
--:|:--
<div style="white-space: nowrap; color: #795da3;" class="console-font smaller">invoice.waiting</div> | No payment has been placed yet
<div style="white-space: nowrap; color: #795da3;" class="console-font smaller">invoice.pending</div> | The payment is pending confirmation by the payment gateway
<div style="white-space: nowrap; color: #795da3;" class="console-font smaller">invoice.completed</div> | The payment was sucessfully completed
<div style="white-space: nowrap; color: #795da3;" class="console-font smaller">invoice.failed</div> | The payment has failed
<div style="white-space: nowrap; color: #795da3;" class="console-font smaller">invoice.disputed</div> | The payment was previously completed but the customer filled a dispute or a chargeback
<div style="white-space: nowrap; color: #795da3;" class="console-font smaller">invoice.solved</div> | The previous dispute has been resolved in your favor
<div style="white-space: nowrap; color: #795da3;" class="console-font smaller">invoice.reversed</div> | The previous dispute has been resolved in your customer's favor
<div style="white-space: nowrap; color: #795da3;" class="console-font smaller">invoice.refunded</div> | You issued a refund for the payment

### Subscription events

The subscription events are fred when an update regarding
a [subscription](#subscriptions) occurs.

*Note:* When a subscription iterates, a new [invoice](#invoices)
and its associated [transaction](#transactions) will be created and  marked as
completed, and its corresponding event will also be fired.

##### Events
|||
--:|:--
<div style="white-space: nowrap; color: #795da3;" class="console-font smaller">subscription.created</div> | A new subscription resource was created
<div style="white-space: nowrap; color: #795da3;" class="console-font smaller">subscription.started</div> | The subscription started
<div style="white-space: nowrap; color: #795da3;" class="console-font smaller">subscription.iterated</div> | The customer paid for the current iteration of its subscription
<div style="white-space: nowrap; color: #795da3;" class="console-font smaller">subscription.trial.ending_soon</div> | The subscription trial is ending soon. You may use this event to notify your customer to update their billing details if not done yet
<div style="white-space: nowrap; color: #795da3;" class="console-font smaller">subscription.trial.ended</div> | The subscription trial ended
<div style="white-space: nowrap; color: #795da3;" class="console-font smaller">subscription.payment_failed</div> | The payment of the current subscription period failed
<div style="white-space: nowrap; color: #795da3;" class="console-font smaller">subscription.canceled</div> | The customer's subscription was canceled <br />*Note:* It might have been canceled because the payment gateway refused your customer's payment (ex: when the credit card expired). The reason of the cancellation is available in the `cancellation_reason` attribute of the subscription

### Customer events

The customer events are fired when an update regarding a [customer](#customers)
occurs.

##### Events
|||
--:|:--
<div style="white-space: nowrap; color: #795da3;" class="console-font smaller">customer.created</div> | A new customer resource was created
<div style="white-space: nowrap; color: #795da3;" class="console-font smaller">customer.updated</div> | The customer resource was updated
<div style="white-space: nowrap; color: #795da3;" class="console-font smaller">customer.deleted</div> | The customer resource was deleted

### Customer token events

The customer token events are fired when an update regarding a [customer token](#tokens)
occurs.

##### Events
|||
--:|:--
<div style="white-space: nowrap; color: #795da3;" class="console-font smaller">customer.token.created</div> | A new customer token resource was created
<div style="white-space: nowrap; color: #795da3;" class="console-font smaller">customer.token.updated</div> | The customer token resource was updated
<div style="white-space: nowrap; color: #795da3;" class="console-font smaller">customer.token.deleted</div> | The customer token resource was deleted

### Plan events

The plan events are fired when an update regarding a [plan](#plans)
occurs.

##### Events
|||
--:|:--
<div style="white-space: nowrap; color: #795da3;" class="console-font smaller">plan.created</div> | A new plan resource was created
<div style="white-space: nowrap; color: #795da3;" class="console-font smaller">plan.updated</div> | The plan resource was updated
<div style="white-space: nowrap; color: #795da3;" class="console-font smaller">plan.deleted</div> | The plan resource was deleted

### Product events

The product events are fired when an update regarding a [product](#products)
occurs.

##### Events
|||
--:|:--
<div style="white-space: nowrap; color: #795da3;" class="console-font smaller">product.created</div> | A new product resource was created
<div style="white-space: nowrap; color: #795da3;" class="console-font smaller">product.updated</div> | The product resource was updated
<div style="white-space: nowrap; color: #795da3;" class="console-font smaller">product.deleted</div> | The product resource was deleted

### Coupon events

The coupon events are fired when an update regarding a [coupon](#coupon)
occurs.

##### Events
|||
--:|:--
<div style="white-space: nowrap; color: #795da3;" class="console-font smaller">coupon.created</div> | A new coupon resource was created
<div style="white-space: nowrap; color: #795da3;" class="console-font smaller">coupon.updated</div> | The coupon resource was updated
<div style="white-space: nowrap; color: #795da3;" class="console-font smaller">coupon.deleted</div> | The coupon resource was deleted