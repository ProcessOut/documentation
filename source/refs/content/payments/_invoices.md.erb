<div id="accept-payments-category"></div>

## Invoices

An invoice is the core resource for a merchant who wants to accept payments online
using the ProcessOut API. To start using invoices, [let's create one](#create-an-invoice).

##### Attributes
|||
--:|:--
<span class="console-font">**id**</span><br />*string*<br />Read-only |
<span class="console-font">**url**</span><br />*string*<br />Read-only | `URL` to the ProcessOut checkout page
<span class="console-font">**customer**</span><br />*customer_id*<br />*[Customer](#customers) expandable* | Customer linked to the invoice
<span class="console-font">**transaction**</span><br />*transaction_id*<br />*[Transaction](#transactions) expandable* | Transaction generated by the invoice
<span class="console-font">**subscription**</span><br />*subscription_id*<br />*[Subscription](#subscriptions) expandable* | Subscription for which the invoice was automatically generated. Automatically set by ProcessOut
<span class="console-font">**token**</span><br />*token_id*<br />*[Token](#tokens) expandable* | Token used (or to be used) to capture the payment. This token must belong to the customer linked to the invoice, if any
<span class="console-font">**details**</span><br />*list of InvoiceDetails* | Details about the invoice, in the form of a list of InvoiceDetail object- see below for object reference
<span class="console-font">**risk**</span><br />*object of InvoiceRisk* | Risk about the invoice, in the form of a list of Risk object- see below for object reference
<span class="console-font">**device**</span><br />*object of InvoiceDevice* | Device information about the invoice, in the form of a Device object- see below for object reference
<span class="console-font">**shipping**</span><br />*object of InvoiceShipping* | Shipping information about the invoice, in the form of a Shipping object- see below for object reference
<span class="console-font">**name**</span><br />*string*<br /><span class="highlighted">Required</span> | Name of the invoice/item to sell<br /><span style="opacity: 0.5">*Max 80 characters long*</span>
<span class="console-font">**statement_descriptor**</span><br />*string* | Statement that will be shown on your customer's bank account<br /><span style="opacity: 0.5">*Max 22 characters long, should only contain letters, numbers, spaces and commas*</span>
<span class="console-font">**amount**</span><br />*string*<br /><span class="highlighted">Required</span> | Amount to be paid
<span class="console-font">**currency**</span><br />*string*<br /><span class="highlighted">Required</span> | Currency of the invoice, in the ISO 4217 format (ex: `USD`)<br /><span style="opacity: 0.5">*Must be a valid ISO 4217 3 characters currency code*</span>
<span class="console-font">**merchant_initiator_type**</span><br />*string* | For off-session transactions (i.e. payments initiated by the merchant and not the user), set this field to either `recurring` for subscription payments or `one-off`
<span class="console-font">**return_url**</span><br />*string* | `URL` used to redirect the customer once the payment is placed<br /><span style="opacity: 0.5">*Must be a valid URL*</span>
<span class="console-font">**cancel_url**</span><br />*string* | `URL` used to redirect the customer when the payment is canceled<br /><span style="opacity: 0.5">*Must be a valid URL*</span>
<span class="console-font">**metadata**</span><br />[Metadata](#metadata)<br />*dictionary* | Context related to the invoice, key-value pair (string - string)
<span class="console-font">**sca_exemption_reason**</span><br />*string* | Optional reason for requesting SCA exemption (Note: Must also be supported by the PSP. Please contact our support to know more!)<br /><span style="opacity: 0.5">Allowed values are: "low-value", "trusted-beneficiary" or "transaction-risk-analysis"</span>
<span class="console-font">**challenge_indicator**</span><br />*string* | Optional challenge indicator field when requesting 3DS2 (Note: Must also be supported by the PSP. Please contact our support to know more!)<br /><span style="opacity: 0.5">Allowed values are: "no-preference", "no-challenge-requested", "challenge-requested", "challenge-requested-mandate", "no-challenge-requested-tra-performed", "no-challenge-requested-data-share-only", "no-challenge-requested-sca-performed", "no-challenge-requested-whitelist-exemption", "challenge-requested-whitelist-prompt" or "cb-scoring"</span>
<span class="console-font">**sandbox**</span><br />*boolean*<br />Read-only |
<span class="console-font">**created_at**</span><br />*RFC1123 date or timestamp*<br />Read-only |

##### Invoice detail attributes
|||
--:|:--
<span class="console-font">**name**</span><br />*string*<br /><span class="highlighted">Required</span> | Name of the invoice detail, corresponding to a receipt line<br /><span style="opacity: 0.5">*Max 80 characters long*</span>
<span class="console-font">**type**</span><br />*string* | Type of the invoice detail- can be a string containing anything<br /><span style="opacity: 0.5">*Max 30 characters long*</span>
<span class="console-font">**amount**</span><br />*string*<br /><span class="highlighted">Required</span> | Amount represented by the invoice detail
<span class="console-font">**quantity**</span><br />*integer* | Quantity represented by the invoice detail, defaults to 1
<span class="console-font">**metadata**</span><br />[Metadata](#metadata)<br />*dictionary* | Context related to the invoice detail, key-value pair (string - string)
<span class="console-font">**category**</span><br />*string* | Category of the product. Can be `food`, `entertainment`, `home`, `appliance`, `bidding`, `gift`, `technology`, `media`, `communication`, `health`, `sport`, `personal-service`, `professional-service`, `clothing`, `travel`, `transport` or `other`
<span class="console-font">**reference**</span><br />*string* | Reference of the product<br /><span style="opacity: 0.5">*Max 255 characters long*</span>
<span class="console-font">**description**</span><br />*string* | Description of the invoice detail<br /><span style="opacity: 0.5">*Max 255 characters long*</span>
<span class="console-font">**brand**</span><br />*string* | Brand of the product<br /><span style="opacity: 0.5">*Max 80 characters long*</span>
<span class="console-font">**model**</span><br />*string* | Model of the product<br /><span style="opacity: 0.5">*Max 80 characters long*</span>
<span class="console-font">**discount_amount**</span><br />*string* | Discount amount represented by the invoice detail
<span class="console-font">**condition**</span><br />*string* | Condition of the product. Can be `new`, `refurbished`, `used` or `other`
<span class="console-font">**marketplace_merchant**</span><br />*string* | Marketplace merchant ID of the invoice detail
<span class="console-font">**marketplace_merchant_is_business**</span><br />*boolean* | Define whether or not the marketplace merchant is a business
<span class="console-font">**marketplace_merchant_created_at**</span><br />*RFC1123 date or timestamp* | Date at which the merchant was created

##### Risk attributes
|||
--:|:--
<span class="console-font">**score**</span><br />*string* | Scoring of the invoice. There is no validation done on this field as it is used to forward risk information on compatible payment providers<br /><span style="opacity: 0.5">*Max 12 characters long*</span>
<span class="console-font">**is_legit**</span><br />*bool* | Define whether or not the invoice is legit
<span class="console-font">**skip_gateway_rules**</span><br />*bool* | Skip payment gateway fraud engine rules (on compatible gateways only. Please contact us to know more.)

##### Device attributes
|||
--:|:--
<span class="console-font">**id**</span><br />*string* | ID of the device. Free form field, usually is a UUID generated by third party anti-fraud solutions<br /><span style="opacity: 0.5">*Max 100 characters long*</span>
<span class="console-font">**channel**</span><br />*string* | Channel used by the device. Can be `web`, `ios`, `android` or `other`
<span class="console-font">**ip_address**</span><br />*string* | IP address of the device<br /><span style="opacity: 0.5">*Must be a valid IP address*</span>

##### Shipping attributes
|||
--:|:--
<span class="console-font">**amount**</span><br />*string*<br /> | Amount of the shipping
<span class="console-font">**method**</span><br />*string*<br /> | Delivery method. Can be `web`, `collect-at-shop`, `relay`, `travel-station`, `home`, `shipping`, `locker` or `other`.
<span class="console-font">**provider**</span><br />*string*<br /> | Delivery provider<br /><span style="opacity: 0.5">*Max 32 characters long*</span>
<span class="console-font">**delay**</span><br />*string*<br /> | Shipment delay. Can be `express`, `priority`, `standard` or `other`.
<span class="console-font">**address1**</span><br />*string*<br /> | Primary address line where the shipment has to be sent<br /><span style="opacity: 0.5">*Max 255 characters long*</span>
<span class="console-font">**address2**</span><br />*string*<br /> | Secondary address line where the shipment has to be sent<br /><span style="opacity: 0.5">*Max 255 characters long*</span>
<span class="console-font">**state**</span><br />*string*<br /> | State where the shipment has to be sent<br /><span style="opacity: 0.5">*Max 80 characters long*</span>
<span class="console-font">**city**</span><br />*string*<br /> | City where the shipment has to be sent<br /><span style="opacity: 0.5">*Max 80 characters long*</span>
<span class="console-font">**country_code**</span><br />*string*<br /> | Shipment's address country code (ex: `US`, `FR`) where it has to be sent<br /><span style="opacity: 0.5">*Must be a valid ISO 3166 2 characters country code*</span>
<span class="console-font">**zip**</span><br />*string*<br /> | ZIP code where the shipment has to be sent<br /><span style="opacity: 0.5">*Max 16 characters long*</span>
<span class="console-font">**phone_number**</span><br />*string*<br /> | Phone number of the shipment recipent<br /><span style="opacity: 0.5">*Max 16 characters long*</span>
<span class="console-font">**expects_shipping_at**</span><br />*RFC1123 date or timestamp*<br /> | Date at which the shipment is expected to be sent



### Create an invoice

```shell
curl -X POST https://api.processout.com/invoices \
    <%= partial "header-curl" %> \
    -d customer_id="cust_LvjCcLOVe6iWn2aeCNhNmK7RbbG6K8XF" \
    -d name="Amazing item" \
    -d statement_descriptor="amazing item" \
    -d amount="4.99" \
    -d currency="USD"
```

```javascript
<%= partial "header-js" %>
client.newInvoice().create({
    customer_id:          "cust_LvjCcLOVe6iWn2aeCNhNmK7RbbG6K8XF",
    name:                 "Amazing item",
    statement_descriptor: "amazing item",
    amount:               "4.99",
    currency:              "USD"
}).then(function(invoice) {
    //

}, function(err) {
    // An error occured

});
```

```python
<%= partial "header-python" %>
invoice = client.new_invoice().create({
    "customer_id":          "cust_LvjCcLOVe6iWn2aeCNhNmK7RbbG6K8XF",
    "name":                 "Amazing item",
    "statement_descriptor": "amazing item",
    "amount":               "4.99",
    "currency":              "USD"
})
```

```ruby
<%= partial "header-ruby" %>
invoice = client.invoice.create(
    "customer_id":        "cust_LvjCcLOVe6iWn2aeCNhNmK7RbbG6K8XF",
    name:                 "Amazing item",
    statement_descriptor: "amazing item",
    amount:               "4.99",
    currency:              "USD"
)
```

```php
<%= partial "header-php" %>
$invoice = $client->newInvoice()->create(array(
    "customer_id"          => "cust_LvjCcLOVe6iWn2aeCNhNmK7RbbG6K8XF",
    "name"                 => "Amazing item",
    "statement_descriptor" => "amazing item",
    "amount"               => "4.99",
    "currency"              => "USD"
));
```

```go
<%= partial "header-go" %>
iv, err := client.NewInvoice().Create(processout.InvoiceCreateParameters{
    Invoice: &processout.Invoice{
        CustomerID:          processout.String("cust_LvjCcLOVe6iWn2aeCNhNmK7RbbG6K8XF"),
        Name:                processout.String("Amazing item"),
        StatementDescriptor: processout.String("amazing item"),
        Amount:              processout.String("4.99"),
        Currency:            processout.String("USD"),
    },
})
```

Creating an invoice for your customers can be done on your server's backend.
Simply create an Invoice resource with a `name`, `amount` and `currency`.

### Fetch an invoice

```shell
curl -X GET https://api.processout.com/invoices/iv_MgeLS2Rr3ZGwjqOvDvYSuWx7ce88luXl \
    <%= partial "header-curl" %>
```

```javascript
<%= partial "header-js" %>
client.newInvoice().find("iv_MgeLS2Rr3ZGwjqOvDvYSuWx7ce88luXl").then(
    function(invoice) {
        // The invoice was fetched

    }, function(err) {
        // The invoice could not be found
    });
```

```python
<%= partial "header-python" %>
invoice = client.new_invoice().find("iv_MgeLS2Rr3ZGwjqOvDvYSuWx7ce88luXl")
```

```ruby
<%= partial "header-ruby" %>
invoice = client.invoice.find("iv_MgeLS2Rr3ZGwjqOvDvYSuWx7ce88luXl")
```

```php
<%= partial "header-php" %>
$invoice = $client->newInvoice()->find("iv_MgeLS2Rr3ZGwjqOvDvYSuWx7ce88luXl");
```

```go
<%= partial "header-go" %>
iv, err := client.NewInvoice().Find("iv_MgeLS2Rr3ZGwjqOvDvYSuWx7ce88luXl")
```

Invoices can be fetched from ProcessOut by using their IDs. If the invoice
could not be found, an error is thrown.

### Capture an invoice

```shell
curl -X POST https://api.processout.com/invoices/iv_MgeLS2Rr3ZGwjqOvDvYSuWx7ce88luXl/capture \
    <%= partial "header-curl" %> \
    -d source=card_1jSEVrx7oaRta1KEdxoMWbiGkK2MijrZ
```

```javascript
<%= partial "header-js" %>
// The source could also be a token tok_fKK4btSG7wd13ZZaevzhMcuNbpjcu1Zy
invoice.capture("card_1jSEVrx7oaRta1KEdxoMWbiGkK2MijrZ").then(
    function(transaction) {
        // The invoice was captured and returned a transaction

    }, function(err) {
        // The invoice could not be captured
    });
```

```python
<%= partial "header-python" %>
# The source could also be a token tok_fKK4btSG7wd13ZZaevzhMcuNbpjcu1Zy
transaction = invoice.capture("card_1jSEVrx7oaRta1KEdxoMWbiGkK2MijrZ")
```

```ruby
<%= partial "header-ruby" %>
# The source could also be a token tok_fKK4btSG7wd13ZZaevzhMcuNbpjcu1Zy
transaction = invoice.capture("card_1jSEVrx7oaRta1KEdxoMWbiGkK2MijrZ")
```

```php
<%= partial "header-php" %>
// The source could also be a token tok_fKK4btSG7wd13ZZaevzhMcuNbpjcu1Zy
$transaction = $invoice->capture("card_1jSEVrx7oaRta1KEdxoMWbiGkK2MijrZ");
```

```go
<%= partial "header-go" %>
// The source could also be a token tok_fKK4btSG7wd13ZZaevzhMcuNbpjcu1Zy
tr, _ := iv.Capture("card_1jSEVrx7oaRta1KEdxoMWbiGkK2MijrZ")
```

Capturing an invoice is done by calling `capture` on the invoice and passing
the `source` to be used to capture the payment in the parameters. If an error
occured while capturing the payment, an error is thrown. Otherwise, the
transaction linked to the invoice is updated and returned.

Be sure to check the [status](/payments/handle-status-changes-webhooks/#transaction-statuses) field of the [Transaction](#transactions)
to make sure the payment fully made it through. If the payment is not yet
completed, we will create new [Events](#events) to keep you updated regarding the status
of the transaction.

Capturing an invoice can be done using a `card`, a [Token](#tokens) or a 
[Gateway request](#).

It is also possible to partially capture a transaction using the `capture_amount` 
flag in the request. However, beware that your PSPs need to support partial
captures as well, otherwise you'll need to to do a full capture followed by a
partial refund to achieve a similar goal.

### Authorize only & auto capture

```shell
curl -X POST https://api.processout.com/invoices/iv_MgeLS2Rr3ZGwjqOvDvYSuWx7ce88luXl/authorize \
    <%= partial "header-curl" %> \
    -d source=card_1jSEVrx7oaRta1KEdxoMWbiGkK2MijrZ \
    -d auto_capture_at="2022-10-02T15:00:00Z" # optional if you want us to auto capture for you
```

```javascript
<%= partial "header-js" %>
// The source could also be a token tok_fKK4btSG7wd13ZZaevzhMcuNbpjcu1Zy
invoice.authorize("card_1jSEVrx7oaRta1KEdxoMWbiGkK2MijrZ", {
    // optional if you want us to auto capture for you
    "auto_capture_at": "2022-10-02T15:00:00Z"
}).then(
    function(transaction) {
        // The invoice was authorized and returned a transaction

    }, function(err) {
        // The invoice could not be authorized
    });
```

```python
<%= partial "header-python" %>
# The source could also be a token tok_fKK4btSG7wd13ZZaevzhMcuNbpjcu1Zy
transaction = invoice.authorize("card_1jSEVrx7oaRta1KEdxoMWbiGkK2MijrZ", {
    # optional if you want us to auto capture for you
    "auto_capture_at": "2022-10-02T15:00:00Z"
})
```

```ruby
<%= partial "header-ruby" %>
# The source could also be a token tok_fKK4btSG7wd13ZZaevzhMcuNbpjcu1Zy
transaction = invoice.authorize("card_1jSEVrx7oaRta1KEdxoMWbiGkK2MijrZ", (
    # optional if you want us to auto capture for you
    auto_capture_at: "2022-10-02T15:00:00Z"
))
```

```php
<%= partial "header-php" %>
// The source could also be a token tok_fKK4btSG7wd13ZZaevzhMcuNbpjcu1Zy
$transaction = $invoice->authorize("card_1jSEVrx7oaRta1KEdxoMWbiGkK2MijrZ", array(
    // optional if you want us to auto capture for you
    "auto_capture_at" => "2022-10-02T15:00:00Z"
));
```

```go
<%= partial "header-go" %>
// The source could also be a token tok_fKK4btSG7wd13ZZaevzhMcuNbpjcu1Zy
tr, _ := iv.Authorize("card_1jSEVrx7oaRta1KEdxoMWbiGkK2MijrZ", InvoiceAuthorizeParameters{
    AutoCaptureAt: "2022-10-02T15:00:00Z",
})
```

Instead of directly capturing a transaction, it's also possible to execute a
transaction in two phases: the authorization, which confirms and locks the funds on your user's
bank account but without doing the actual money movement, and the capture which initiates
the money settlement.

ProcessOut offers two ways of executing a two-step transaction: either handling the
authorization and capture steps yourself, or performing the authorization and letting us
auto capture the transaction at a later date for you.

To manually capture after an authorization, simply call `capture` endpoint. To set up
the auto capture, you can send the `auto_capture_at` field during the authorization, with the
RFC3339 date at which the auto capture should be performed.

Keep in a mind an authorization usually only lasts for 7 days, after which the capture
may fail.


### Void an invoice

```shell
curl -X POST https://api.processout.com/invoices/iv_MgeLS2Rr3ZGwjqOvDvYSuWx7ce88luXl/void \
    <%= partial "header-curl" %>
```

```javascript
<%= partial "header-js" %>
// The source could also be a token tok_fKK4btSG7wd13ZZaevzhMcuNbpjcu1Zy
invoice.void().then(
    function(transaction) {
        // The invoice was voided and returned a transaction

    }, function(err) {
        // The invoice could not be voided
    });
```

```python
<%= partial "header-python" %>
transaction = invoice.void()
```

```ruby
<%= partial "header-ruby" %>
transaction = invoice.void()
```

```php
<%= partial "header-php" %>
$transaction = $invoice->void();
```

```go
<%= partial "header-go" %>
tr, _ := iv.Void()
```

Voiding an invoice is meant to cancel a previously authorized transaction (and
can therefore not be done on a transaction that's not with an `authorized` state).

Voiding an invoice is done by calling `void` on the invoice, and doesn't need
any extra parameter. If an error occured while capturing the payment, an error 
is thrown. Otherwise, the transaction linked to the invoice is updated and returned.
