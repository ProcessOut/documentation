## Refunds

Once a payment is placed, the merchant has the ability to refund a part or the 
entire transaction amount. This is especially useful when doing customer
support, as refunds are generally free compared to chargebacks. It is strongly
advised to issue a refund (full or partial) when you think a transaction is
fraudulent.

##### Attributes
|||
--:|:--
<span class="console-font">**id**</span><br />*string*<br />Read-only |
<span class="console-font">**transaction**</span><br />*transaction_id*<br />*[Transaction](#transactions) expandable* | Transaction for which the refund was issued
<span class="console-font">**reason**</span><br />*string*<br /><span class="highlighted">Required</span>| Reason for the refund. Can be either `customer_request`, `duplicate` or `fraud`
<span class="console-font">**information**</span><br />*string*<br /> | Additional information regarding the refund
<span class="console-font">**amount**</span><br />*string*<br /><span class="highlighted">Required</span> | Refund amount applied on the transaction
<span class="console-font">**metadata**</span><br />[Metadata](#metadata)<br />*dictionary* | Context related to the customer, key-value pair (string - string)
<span class="console-font">**sandbox**</span><br />*boolean*<br />Read-only |

### Issue a refund

```shell
curl https://api.processout.com/transactions/tr_ItJdKlhfaVn0SUGd9z1i9Jqe0STl4jxC/refunds \
    <%= partial "header-curl" %> \
    -d reason=customer_request \
    -d amount=4.99
```

```javascript
<%= partial "header-js" %>
client.newRefund().create({
    transaction_id: "tr_ItJdKlhfaVn0SUGd9z1i9Jqe0STl4jxC",
    reason:         "customer_request",
    amount:         "4.99"
}).then(function(refund) {
    // 

}, function(err) {
    // An error occured

});
```

```python
<%= partial "header-python" %>
refund = client.new_refund().create({
    "transaction_id": "tr_ItJdKlhfaVn0SUGd9z1i9Jqe0STl4jxC",
    "reason":         "customer_request",
    "amount":         "4.99"
})
```

```ruby
<%= partial "header-ruby" %>
refund = client.refund.new().create(
    transaction_id: "tr_ItJdKlhfaVn0SUGd9z1i9Jqe0STl4jxC",
    reason:         "customer_request",
    amount:         "4.99"
)
```

```php
<%= partial "header-php" %>
$refund = $client->newRefund()->create(array(
    "transaction_id" => "tr_ItJdKlhfaVn0SUGd9z1i9Jqe0STl4jxC",
    "reason"         => "customer_request",
    "amount"         => "4.99"
));
```

```go
<%= partial "header-go" %>
refund, err := client.NewRefund().Create(&processout.RefundCreateParameter{
    Refund: {
        TransactionID: "tr_ItJdKlhfaVn0SUGd9z1i9Jqe0STl4jxC",
        Reason:        "customer_request",
        Amount:        "4.99"
    },
})
```

Refunding a transaction can be done by providing the transaction ID to be
refunded, as well as the amount and a reason for the refund, which can be
either `customer_request`, `duplicate` or `fraud`.

The amount can also be left empty to operate a full refund on the transaction.
In case partial refunds were previously applied on the transaction, leaving
the refund amount empty will refund what's left of the transaction amount.

### Fetch a refund

```shell
curl https://api.processout.com/transactions/tr_ItJdKlhfaVn0SUGd9z1i9Jqe0STl4jxC/refunds/refd_QKliea9OGXtLBXcar2SJjfD11aY0J2SH \
    <%= partial "header-curl" %>
```

```javascript
<%= partial "header-js" %>
client.newRefund().find("tr_ItJdKlhfaVn0SUGd9z1i9Jqe0STl4jxC", 
    "refd_QKliea9OGXtLBXcar2SJjfD11aY0J2SH").then(
        function(refund) {
            // Refund was fetched
        }, function(err) {
            // An error occured
        });
```

```python
<%= partial "header-python" %>
refund = client.new_refund().find("tr_ItJdKlhfaVn0SUGd9z1i9Jqe0STl4jxC",
    "refd_QKliea9OGXtLBXcar2SJjfD11aY0J2SH")
```

```ruby
<%= partial "header-ruby" %>
refund = client.refund.find("tr_ItJdKlhfaVn0SUGd9z1i9Jqe0STl4jxC",
    "refd_QKliea9OGXtLBXcar2SJjfD11aY0J2SH")
```

```php
<%= partial "header-php" %>
$refund = $client->newRefund()->find("tr_ItJdKlhfaVn0SUGd9z1i9Jqe0STl4jxC",
    "refd_QKliea9OGXtLBXcar2SJjfD11aY0J2SH");
```

```go
<%= partial "header-go" %>
refund, err := client.NewRefund().Find("tr_ItJdKlhfaVn0SUGd9z1i9Jqe0STl4jxC",
    "refd_QKliea9OGXtLBXcar2SJjfD11aY0J2SH")
```

It is possible to fetch a transaction's refund by its ID. An error is thrown 
if the refund could not be found for the specified transaction.
