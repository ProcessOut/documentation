<div id="webhooks-category"></div>

## Webhooks

Processing [events](#events) can be done through webhooks (also called
callbacks or Instant Payment Notification: IPN). It is essentially a web
request made to your web application, notifying you of the new event.
Webhooks can be used to automatically deliver an item upon successful
payment for example.

However, as many payment gateways can be used at the same time, ProcessOut
provides webhooks containing unified, normalized and easy to use data, as well
as transaction states corresponding to the triggered event.

### Pre-requisites

In order to start receiving webhooks, you must add your `webhook endpoint`s in your
[ProcessOut dashboard](https://dashboard.processout.com).

You should also note that *we will always `POST` a json encoded body request*
to your application. Therefore, you should accept POST requests with a json
encoded body.

Furthermore, you should *remove all CSRF protection* on your endpoints receiving
webhooks. Most frameworks and CMS activate it by default, which could
prevent ProcessOut from correctly posting webhooks to your application.

### Custom URL per Invoice

Sometimes, it's also important for you to define custom webhook endpoints per
order.

You can achieve this by providing a `webhook_url` during the `POST` call on
`/invoices` (i.e. when you're creating a new [Invoice](#Invoices). Events
specific to the invoice the `webhook_url` is associated with will be sent to
this URL. The other webhook endpoints you have defined at a global level on
your ProcessOut project will still be used as well on Invoices that have a custom
`webhook_url` defined.

```shell
curl -X POST https://api.processout.com/invoices \
    <%= partial "header-curl" %> \
    -d customer_id="cust_LvjCcLOVe6iWn2aeCNhNmK7RbbG6K8XF" \
    -d name="Amazing item" \
    -d amount="4.99" \
    -d currency="USD" \
    -d webhook_url="https://superstore.com/webhooks"
```

```javascript
<%= partial "header-js" %>
client.newInvoice().create({
    customer_id:          "cust_LvjCcLOVe6iWn2aeCNhNmK7RbbG6K8XF",
    name:                 "Amazing item",
    amount:               "4.99",
    currency:             "USD",
    webhook_url:          "https://superstore.com/webhooks"
}).then(function(invoice) {
    //

}, function(err) {
    // An error occured

});
```

```python
<%= partial "header-python" %>
invoice = client.new_invoice().create({
    "customer_id":          "cust_LvjCcLOVe6iWn2aeCNhNmK7RbbG6K8XF",
    "name":                 "Amazing item",
    "amount":               "4.99",
    "currency":             "USD",
    "webhook_url":          "https://superstore.com/webhooks"
})
```

```ruby
<%= partial "header-ruby" %>
invoice = client.invoice.create(
    "customer_id":        "cust_LvjCcLOVe6iWn2aeCNhNmK7RbbG6K8XF",
    name:                 "Amazing item",
    amount:               "4.99",
    currency:             "USD",
    webhook_url:          "https://superstore.com/webhooks"
)
```

```php
<%= partial "header-php" %>
$invoice = $client->newInvoice()->create(array(
    "customer_id"          => "cust_LvjCcLOVe6iWn2aeCNhNmK7RbbG6K8XF",
    "name"                 => "Amazing item",
    "amount"               => "4.99",
    "currency"             => "USD",
    "webhook_url"          => "https://superstore.com/webhooks"
));
```

```go
<%= partial "header-go" %>
iv, err := client.NewInvoice().Create(processout.InvoiceCreateParameters{
    Invoice: &processout.Invoice{
        CustomerID:          processout.String("cust_LvjCcLOVe6iWn2aeCNhNmK7RbbG6K8XF"),
        Name:                processout.String("Amazing item"),
        Amount:              processout.String("4.99"),
        Currency:            processout.String("USD"),
        WebhookURL:          processout.String("https://superstore.com/webhooks"),
    },
})
```


### Usage

```shell
# Webhooks are not supported with cURL.
```

```javascript
<%= partial "header-js" %>
// req is filled with the decoded json data from the request body
client.newEvent().find(req["event_id"]).then(function(event) {
    // We may now access the event
    var data = event.getData();

    switch (data["name"]) {
    case "invoice.completed":
        // Successful payment
        break;
    case "invoice.pending":
        // Payment still needs some time to be processed
        break;
    // ...
    default:
        console.log("Unknown webhook action");
        return;
    }

}, function(err) {
    // An error occured, most likely the event was coming from an
    // untrusted source

});
```

```python
<%= partial "header-python" %>

# req is filled with the decoded json data from the request body
event = client.new_event().find(req["event_id"])
data  = event.data

if data["name"] == "invoice.completed":
    # Successful payment
    pass

elif data["name"] == "invoice.pending":
    # Payment still needs some time to be processed
    pass

# ...

else:
    # Shouldn't be here..
    print("Unknown webhook action")
```

```ruby
<%= partial "header-ruby" %>

# req is filled with the decoded json data from the request body
event = client.event.find(req.event_id)
data  = event.data

if data["name"] == "invoice.completed"
    # Successful payment
elsif data["name"] == "invoice.pending"
    # Payment still needs some time to be processed

# ...

else
    # Shouldn't be here..
    puts "Unknown webhook action"
end
```

```php
<%= partial "header-php" %>
$reqRaw = trim(file_get_contents("php://input"));
$req    = json_decode($reqRaw, true);

$event = $client->newEvent()->find($req["event_id"]);
$data  = $event->getData();

switch($data["name"])
{
case "invoice.completed":
    // Successful payment
    break;
case "invoice.pending":
    // Payment still needs some time to be processed
    break;
// ...
default:
    echo "Unknown webhook action"; exit();
}
```

```go
<%= partial "header-go" %>
// EventData is the definition of a ProcessOut Event data
type EventData struct {
    Name        string              `json:"name"`
    Sandbox     bool                `json:"sandbox"`
    Invoice     *processout.Invoice `json:"invoice"`
}

// ProcessOutWebhook is the definition of a ProcessOut webhook
type ProcessOutWebhook struct {
    EventID string `json:"event_id"`
}

func handleProcessOutWebhooks(w http.ResponseWriter,
	r *http.Request) {

	defer r.Body.Close()
	reqRaw, err := ioutil.ReadAll(r.Body)
	if err != nil {
		panic(err)
	}

	// Decode the webhook
	webhook := &ProcessOutWebhook{}
	json.Unmarshal(reqRaw, &webhook)

    // Fetching the associated event
    event, err := client.NewEvent().Find(webhook.EventID)
    if err != nil {
        // Webhook not found, most likely coming from an
        // insecure source
		w.WriteHeader(http.StatusBadRequest)
		return
    }

    e, _ := event.(EventData)
	switch e.Name {
	case "invoice.completed":
		// Successful payment

	case "invoice.pending":
		// Payment still needs some time to be processed

	// ...

	default:
		// Return an HTTP OK response so that unsuported
		// webhooks do not get sent again
		w.WriteHeader(http.StatusOK)
		return
	}
}
```

The webhooks your web application receives only contain the ID of the event,
which can then be [fetched](#find-an-event) through the ProcessOut API to 
access the actual data of the event.