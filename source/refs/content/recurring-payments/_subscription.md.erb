## Subscriptions

Subscriptions are objects representing your customers' subscriptions.

##### Attributes
|||
--:|:--
**id**<br />*string*<br />Read-only |
**url**<br />*string*<br />Read-only | `url` to the ProcessOut checkout page
**customer**<br />*[Customer](#customers)*<br />Read-only |
**plan**<br />*[Plan](#plans)*<br />Read-only | Plan, if one was used when creating the subscription
**source**<br />*string*<br /> Write-only | The source used to activate the subscription
**name**<br />*string*<br />Required | Name of the subscription
**amount**<br />*string*<br />Required | Amount to be paid at every iteration of the subscription
**currency**<br />*string*<br />Required | Currency of the subscription, in the ISO 4217 format (ex: `USD`)
**interval**<br />*string*<br />Required | Number of days for the recurring period
**trial_end_at**<br />*string* | Date at which the trial of the subscription will end. Defaults to no trial
**metadata**<br />[Metadata](#metadata)<br />*dictionary* | Context related to the recurring invoice, key-value pair (string => string)
**return_url**<br />*string* | `url` used to redirect the customer once the payment is placed
**cancel_url**<br />*string* | `url` used to redirect the customer when the payment is canceled |ProcessOut cancelation landing page
**canceled**<br />*boolean* |
**cancellation_reason**<br />*boolean* | If `canceled` is true, represents the reason why the recurring invoice was canceled
**sandbox**<br />*boolean*<br />Read-only |


### Create a subscription

```javascript
<%= partial "header-js" %>
var subscription = new ProcessOut.Subscription();
subscription.setName("Amazing item");
subscription.setAmount("4.99");
subscription.setCurrency("USD");
subscription.setInterval("1m");

subscription.create("cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P").then(
    function(subscription) {
        // 

    }, function(err) {
        // An error occured

    });
```

```python
<%= partial "header-python" %>
subscription          = Subscription()
subscription.name     = "Amazing item"
subscription.amount   = "4.99"
subscription.currency = "USD"
subscription.interval = "1m"

subscription = subscription.create("cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P")
```

```php
<?php
<%= partial "header-php" %>
$subscription = new \ProcessOut\Subscription();
$subscription
    ->setName("Amazing item")
    ->setAmount("4.99")
    ->setCurrency("USD")
    ->setInterval("1m");

$subscription = $subscription->create("cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P");
```

```go
<%= partial "header-go" %>
sub := &processout.Subscription{
	Name:     "Amazing item",
	Amount:   "4.99",
	Currency: "USD",
	Interval: "1m",
}

sub, err := client.Subscriptions.Create(sub, "cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P")
```

To create a subscription for a specific customer, the field `interval` 
must be set. To make it easy to define precise subscription
intervals, `interval` is a signed sequence of decimal numbers, such as "1m",
"2w" or "1m15d". Valid time units are "d" for days, "w" for weeks, "m" for months
and "y" for years. `interval` must represent a positive number of days.

The field `trial_end_at` may also be set to a specific date to add a trial to 
the subscription, during which the customer will not be charged. The trial will 
end at that specific date automatically.

### Create from a plan

```javascript
<%= partial "header-js" %>
var subscription = new ProcessOut.Subscription();
subscription.createFromPlan("cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P",
    "silver-plan").then(function(subscription) {
        // 

    }, function(err) {
        // An error occured

    });
```

```python
<%= partial "header-python" %>
subscription = Subscription()
subscription = subscription.createFromPlan(
    "cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P", "silver-plan")
```

```php
<?php
<%= partial "header-php" %>
$subscription = new \ProcessOut\Subscription();
$subscription = $subscription->createFromPlan(
    "cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P", "silver-plan");
```

```go
<%= partial "header-go" %>
sub, err := client.Subscriptions.CreateFromPlan(&processout.Subscription{}, 
    "cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P", "silver-plan")
```

It is also possible to create a subscription from a plan that you'd have
created from your [Dashboard](https://dashboard.processout.com) or directly 
from the API.

### Fetch a subscription

```javascript
<%= partial "header-js" %>
ProcessOut.Subscription.find("sub_7kAxfNML6jIc3bltGIt0uK2nKHDyzzq3").then(
    function(subscription) {
        // 

    }, function(err) {
        // An error occured

    });
```

```python
<%= partial "header-python" %>
subscription = Subscription.find("sub_7kAxfNML6jIc3bltGIt0uK2nKHDyzzq3")
```

```php
<%= partial "header-php" %>
$subscription = \ProcessOut\Subscription::find("sub_7kAxfNML6jIc3bltGIt0uK2nKHDyzzq3");
```

```go
<%= partial "header-go" %>
sub, err := client.Subscriptions.Find("7kAxfNML6jIc3bltGIt0uK2nKHDyzzq3")
```

Fetch a subscription from its ID. Throws an error if the subscription could
not be found.

### Activate a subscription

```javascript
<%= partial "header-js" %>
ProcessOut.Subscription.find("sub_7kAxfNML6jIc3bltGIt0uK2nKHDyzzq3").then(
    function(subscription) {
        subscription.applySource("card_C4hZXQTU0aWoYeenHYC0DektYDqf8ocj").then(
            function(subscription) {
                // 

            }, function(err) {
                // An error occured
            });

    }, function(err) {
        // An error occured

    });
```

```python
<%= partial "header-python" %>
subscription = Subscription.find("sub_7kAxfNML6jIc3bltGIt0uK2nKHDyzzq3")
subscription.applySource("card_C4hZXQTU0aWoYeenHYC0DektYDqf8ocj")
```

```php
<%= partial "header-php" %>
$subscription = \ProcessOut\Subscription::find("sub_7kAxfNML6jIc3bltGIt0uK2nKHDyzzq3");
$subscription->applySource("card_C4hZXQTU0aWoYeenHYC0DektYDqf8ocj");
```

```go
<%= partial "header-go" %>
sub, err := client.Subscriptions.Find("7kAxfNML6jIc3bltGIt0uK2nKHDyzzq3")
sub, err = client.Subscriptions.ApplySource("card_C4hZXQTU0aWoYeenHYC0DektYDqf8ocj")
```

Activating a subscription is done by applying a source to the subscription. The
source can be a `card`, a [Token](#tokens) or a [Gateway Request](#). An error
is thrown if the source could not be used.

### Cancel a subscription

```javascript
<%= partial "header-js" %>
ProcessOut.Subscription.find("sub_7kAxfNML6jIc3bltGIt0uK2nKHDyzzq3").then(
    function(subscription) {
        // or cancel("2022-10-02T15:00:00Z", "Cancellation reason")
        subscription.cancel("Cancellation reason").then(function(subscription) {
            // 

        }, function(err) {
            // Could not cancel it

        });

    }, function(err) {
        // An error occured

    });
```

```python
<%= partial "header-python" %>
subscription = Subscription.find("sub_7kAxfNML6jIc3bltGIt0uK2nKHDyzzq3")
subscription.cancel("Cancellation reason")
# or subscription.cancelAt("2022-10-02T15:00:00Z", "Cancellation reason")
```

```php
<%= partial "header-php" %>
$subscription = \ProcessOut\Subscription::find("sub_7kAxfNML6jIc3bltGIt0uK2nKHDyzzq3");
$subscription->cancel("Cancellation reason");
// or $subscription->cancelAt("2022-10-02T15:00:00Z", "Cancellation reason");
```

```go
<%= partial "header-go" %>
sub, err := client.Subscriptions.Find("7kAxfNML6jIc3bltGIt0uK2nKHDyzzq3")
sub, err = client.Subscriptions.Cancel(sub, "Cancellation reason")
// or sub, err = client.Subscriptions.CancelAt("2022-10-02T15:00:00Z", 
//      "Cancellation reason")
```

A subscription can be cancelled immediately or at a certain date. A short reason
for the cancellation may also be provided. An error is thrown if the cancellation
couldn't be done.

When doing an immediate cancellation, ProcessOut internally stores a date for the
cancellation date in the past so that our worker pulls the job as soon as possible.
