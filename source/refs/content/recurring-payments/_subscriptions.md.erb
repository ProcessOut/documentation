## Subscriptions

Subscriptions are objects representing your customers' subscriptions.

##### Attributes
|||
--:|:--
<span class="console-font">**id**</span><br />*string*<br />Read-only |
<span class="console-font">**url**</span><br />*string*<br />Read-only | `url` to the ProcessOut checkout page
<span class="console-font">**customer**</span><br />*customer_id*<br />*[Customer](#customers) expandable* | Customer owning the subscription
<span class="console-font">**plan**</span><br />*plan_id*<br />*[Plan](#plans) expandable* | Plan, if one was used when creating the subscription
<span class="console-font">**token**</span><br />*token_id*<br />*[Token](#tokens) expandable* | Token used to capture payments of the subscription
<span class="console-font">**discounts**</span><br />*[Discounts](#discounts) expandable* | Discounts list applied to the subscription
<span class="console-font">**addons**</span><br />*[Addons](#addons) expandable* | Addons list applied to the subscription
<span class="console-font">**name**</span><br />*string* | Name of the subscription
<span class="console-font">**amount**</span><br />*string* | Amount to be paid at every iteration of the subscription
<span class="console-font">**currency**</span><br />*string* | Currency of the subscription, in the ISO 4217 format (ex: `USD`)
<span class="console-font">**interval**</span><br />*string* | Interval between each subscription iteration. "1m" for monthly subscriptions, "1w" for weekly.
<span class="console-font">**trial_end_at**</span><br />*string* | Date at which the trial of the subscription will end. Defaults to no trial
<span class="console-font">**metadata**</span><br />[Metadata](#metadata)<br />*dictionary* | Context related to the subscription, key-value pair (string - string)
<span class="console-font">**return_url**</span><br />*string* | `url` used to redirect the customer once the payment is placed
<span class="console-font">**cancel_url**</span><br />*string* | `url` used to redirect the customer when the payment is canceled |ProcessOut cancelation landing page
<span class="console-font">**canceled**</span><br />*boolean* |
<span class="console-font">**cancellation_reason**</span><br />*boolean* | If `canceled` is true, represents the reason why the subscription was canceled
<span class="console-font">**sandbox**</span><br />*boolean*<br />Read-only |


### Create a subscription

```shell
curl https://api.processout.com/subscriptions \
    <%= partial "header-curl" %> \
    -d customer_id=cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P \
    -d name="Amazing item" \
    -d amount="4.99" \
    -d currency=USD \
    -d interval=1m
```

```javascript
<%= partial "header-js" %>
var subscription = client.newSubscription().create({
    customer_id: "cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P",

    name:     "Amazing subscription",
    amount:   "4.99",
    currency: "USD",
    interval: "1m"
}).then(function(subscription) {
    // 

}, function(err) {
    // An error occured

});

// or
var subscription = client.newSubscription().create({
    customer_id: "cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P",
    plan_id:     "silver-plan"
}).then(function(subscription) {
    // 

}, function(err) {
    // An error occured

});
```

```python
<%= partial "header-python" %>
subscription = client.new_subscription().create({
    "customer_id": "cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P",

    "name":     "Amazing subscription",
    "amount":   "4.99",
    "currency": "USD",
    "interval": "1m"
})

# or
subscription = client.new_subscription().create({
    "customer_id": "cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P",
    "plan_id":     "silver-plan"
})
```

```ruby
<%= partial "header-ruby" %>
subscription = client.subscription.create(
    customer_id: "cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P",

    name:     "Amazing subscription",
    amount:   "4.99",
    currency: "USD",
    interval: "1m"
)

# or
subscription = client.subscription.new().create(
    customer_id: "cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P",
    plan_id:     "silver-plan"
)
```

```php
<%= partial "header-php" %>
$subscription = $client->newSubscription()->create(array(
    "customer_id" => "cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P",

    "name":    => "Amazing subscription",
    "amount"   => "4.99",
    "currency" => "USD",
    "interval" => "1m"
));

// or
$subscription = $client->newSubscription()->create(array(
    "customer_id" => "cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P",
    "plan_id"     => "silver-plan"
));
```

```go
<%= partial "header-go" %>
sub, err := client.NewSubscription().Create(processout.SubscriptionCreateParameters{
    Subscription: &processout.Subscription{
        CustomerID: processout.String("cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P"),
        Name:       processout.String("Amazing item"),
        Amount:     processout.String("4.99"),
        Currency:   processout.String("USD"),
        Interval:   processout.String("1m"),
    },
})

// or
sub, err := client.NewSubscription().Create(&processout.SubscriptionCreateParameters{
    Subscription: &processout.Subscription{
        CustomerID: "cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P",
        PlanID:     "silver-plan",
    },
})
```

To create a subscription for a specific customer, the field `interval` 
must be set. To make it easy to define precise subscription
intervals, `interval` is a signed sequence of decimal numbers, such as "1m",
"2w" or "1m15d". Valid time units are "d" for days, "w" for weeks, "m" for months
and "y" for years. `interval` must represent a positive number of days.

The field `trial_end_at` may also be set to a specific date to add a trial to 
the subscription, during which the customer will not be charged. The trial will 
end at that specific date automatically.

### Fetch a subscription

```shell
curl https://api.processout.com/subscriptions/sub_7kAxfNML6jIc3bltGIt0uK2nKHDyzzq3 \
    <%= partial "header-curl" %>
```

```javascript
<%= partial "header-js" %>
client.newSubscription().find("sub_7kAxfNML6jIc3bltGIt0uK2nKHDyzzq3").then(
    function(subscription) {
        // 

    }, function(err) {
        // An error occured

    });
```

```python
<%= partial "header-python" %>
subscription = client.new_subscription().find("sub_7kAxfNML6jIc3bltGIt0uK2nKHDyzzq3")
```

```ruby
<%= partial "header-ruby" %>
subscription = client.subscription.find("sub_7kAxfNML6jIc3bltGIt0uK2nKHDyzzq3")
```

```php
<%= partial "header-php" %>
$subscription = $client->newSubscription()->find("sub_7kAxfNML6jIc3bltGIt0uK2nKHDyzzq3");
```

```go
<%= partial "header-go" %>
sub, err := client.NewSubscription().Find("sub_7kAxfNML6jIc3bltGIt0uK2nKHDyzzq3")
```

Fetch a subscription from its ID. Throws an error if the subscription could
not be found.

### Activate a subscription

```shell
curl -X PUT https://api.processout.com/subscriptions/sub_7kAxfNML6jIc3bltGIt0uK2nKHDyzzq3 \
    <%= partial "header-curl" %> \
    -d source=card_C4hZXQTU0aWoYeenHYC0DektYDqf8ocj
```

```javascript
<%= partial "header-js" %>
client.newSubscription().save({
    id:     "sub_7kAxfNML6jIc3bltGIt0uK2nKHDyzzq3",
    source: "card_C4hZXQTU0aWoYeenHYC0DektYDqf8ocj"
}).then(
    function(subscription) {
        // 

    }, function(err) {
        // An error occured
    });
```

```python
<%= partial "header-python" %>
subscription = client.new_subscription().save({
    "id":     "sub_7kAxfNML6jIc3bltGIt0uK2nKHDyzzq3",
    "source": "card_C4hZXQTU0aWoYeenHYC0DektYDqf8ocj"
})
```

```ruby
<%= partial "header-ruby" %>
subscription = client.subscription().save(
    id:     "sub_7kAxfNML6jIc3bltGIt0uK2nKHDyzzq3",
    source: "card_C4hZXQTU0aWoYeenHYC0DektYDqf8ocj"
)
```

```php
<%= partial "header-php" %>
$subscription = $client->newSubscription()->save(array(
    "id"     => "sub_7kAxfNML6jIc3bltGIt0uK2nKHDyzzq3",
    "source" => "card_C4hZXQTU0aWoYeenHYC0DektYDqf8ocj"
));
```

```go
<%= partial "header-go" %>
sub, err := client.NewSubscription().ApplySource(processout.SubscriptionSaveParameters{
    Subscription: &processout.Subscription{
        ID: processout.String("sub_7kAxfNML6jIc3bltGIt0uK2nKHDyzzq3"),
    },
    Source: "card_C4hZXQTU0aWoYeenHYC0DektYDqf8ocj",
})
```

Activating a subscription is done by applying a source to the subscription. The
source can be a `card`, a [Token](#tokens) or a [Gateway Request](#). An error
is thrown if the source could not be used.

### Update a subscription

```shell
curl -X PUT https://api.processout.com/subscriptions/sub_7kAxfNML6jIc3bltGIt0uK2nKHDyzzq3 \
    <%= partial "header-curl" %> \
    -d plan_id="gold-plan" \
    -d prorate=true
```

```javascript
<%= partial "header-js" %>
client.newSubscription().save({
    id:      "sub_7kAxfNML6jIc3bltGIt0uK2nKHDyzzq3",
    plan_id: "gold-plan",
    prorate: true
}).then(
    function(subscription) {
        // 

    }, function(err) {
        // An error occured
    });
```

```python
<%= partial "header-python" %>
subscription = client.new_subscription().save({
    "id":      "sub_7kAxfNML6jIc3bltGIt0uK2nKHDyzzq3",
    "plan_id": "gold-plan",
    "prorate": true
})
```

```ruby
<%= partial "header-ruby" %>
subscription = client.subscription().save(
    id:      "sub_7kAxfNML6jIc3bltGIt0uK2nKHDyzzq3",
    plan_id: "gold-plan",
    prorate: true
)
```

```php
<%= partial "header-php" %>
$subscription = $client->newSubscription()->save(array(
    "id"      => "sub_7kAxfNML6jIc3bltGIt0uK2nKHDyzzq3",
    "plan_id" => "gold-plan",
    "prorate" => true
));
```

```go
<%= partial "header-go" %>
sub, err := client.NewSubscription().Save(processout.SubscriptionSaveParameters{
    Subscription: &processout.Subscription{
        ID:     processout.String("sub_7kAxfNML6jIc3bltGIt0uK2nKHDyzzq3"),
        PlanID: processout.String("gold-plan"),
    },
    Prorate: true,   
})
```

A subscription plan can be changed to upgrade/downgrade the subscription. 

A prorate field is also available to define whether or not you want to enable
proration. Learn more about proration [here &nearr;](/subscriptions/upgrades-and-downgrades).

### Cancel a subscription

```shell
curl -X DELETE https://api.processout.com/subscriptions/sub_7kAxfNML6jIc3bltGIt0uK2nKHDyzzq3 \
    <%= partial "header-curl" %> \
    -d cancel_at="2022-10-02T15:00:00Z" \
    -d cancellation_reason="Cancellation reason"
```

```javascript
<%= partial "header-js" %>
client.newSubscription().cancel({
    id: "sub_7kAxfNML6jIc3bltGIt0uK2nKHDyzzq3",
    cancellation_reason: "Cancellation reason",
    cancel_at:           "2022-10-02T15:00:00Z",
}).then(function(subscription) {
    //

}, function(err) {
    // Could not cancel it

});
```

```python
<%= partial "header-python" %>
subscription = client.new_subscription().cancel({
    "id": "sub_7kAxfNML6jIc3bltGIt0uK2nKHDyzzq3",
    "cancellation_reason": "Cancellation reason",
    "cancel_at":           "2022-10-02T15:00:00Z"
})
```

```ruby
<%= partial "header-ruby" %>
subscription = client.subscription().cancel(
    id: "sub_7kAxfNML6jIc3bltGIt0uK2nKHDyzzq3",
    cancellation_reason: "Cancellation reason",
    cancel_at:           "2022-10-02T15:00:00Z"
)
```

```php
<%= partial "header-php" %>
$subscription = $client->newSubscription()->cancel(array(
    "id": "sub_7kAxfNML6jIc3bltGIt0uK2nKHDyzzq3",
    "cancellation_reason" => "Cancellation reason",
    "cancel_at"           => "2022-10-02T15:00:00Z"
));
```

```go
<%= partial "header-go" %>
sub, err := client.NewSubscription().Cancel(processout.SubscriptionCancelParameters{
    Subscription: &processout.Subscription{
        ID: processout.String("sub_7kAxfNML6jIc3bltGIt0uK2nKHDyzzq3"),
        CancellationReason: processout.String("Cancellation reason"),
        CancelAt:           processout.Time(time.Now()),
    },
)
```

A subscription can be cancelled immediately or at a certain date. A short reason
for the cancellation may also be provided. An error is thrown if the cancellation
couldn't be done.

When doing an immediate cancellation, ProcessOut internally stores a date for the
cancellation date in the past so that our worker pulls the job as soon as possible.
