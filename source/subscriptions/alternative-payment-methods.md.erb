---
title: Alternative payment methods for payments
---

# Handle alternative payment methods

On top of helping you get recurring payments, ProcessOut also
lets you accept subscriptions through alternative payment methods, such as 
[PayPal](https://paypal.com).

<hr>

## Native to the payment modal

Before getting into the white-label integration, it is important to note that the
[ProcessOut modal &nearr;](/payments/payment-modal) comes with the alternative payment methods right from
the start, without any additional work needed. 

## Alternative payment methods flow

The alternative payment methods flow for [`Subscription` &nearr;](/refs/#subscriptions) is very similar to the one
for one-off payments, that's been covered in its guides 
[here &nearr;](/payments/alternative-payment-methods).

However, it is important to note that subscriptions activated using alternative
payment methods aren't as flexible as the ones created directly within 
ProcessOut. For this reason, the following features aren't supported when
using alternative payment methods:

- Upgrades &amp; downgrades
- Coupons &amp; discounts

## Fetch the available alternative payment methods

Before showing the payment methods to the customer, they need to be fetched
from your ProcessOut configuration. This lets you dynamically enable and disable
payment options without having to update any of your code.

In order to fetch your ProcessOut gateways configuration, we'll also need to
create an subscription, as some of the gateways will need some information before
the payment actually takes place.

<div class="language-selector-wrapper">
<%= partial "lg-selector" %>
```shell
# Let's first create a subscription
curl https://api.processout.com/subscriptions \
    <%= partial "header-curl" %> \
    -d customer_id=cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P \
    -d plan_id="silver-plan"

# And now fetch the project's available gateways for subscriptions
curl -X GET https://api.processout.com/gateway-configurations \
    -u <%= partial "projectID" %>:<%= partial "projectSecret" %> \
    -d expand[]=gateway \
    -d filter="tags: redirection flows: subscription"
```

```javascript
<%= partial "header-js" %>
// Let's first create an subscription
client.newSubscription().create({
    customer_id: "cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P",
    plan_id:     "silver-plan",

    expand: ["project"]
}).then(function(subscription) {
    // And now fetch the project's available gateways for subscriptions
    subscription.getProject().fetchGatewayConfigurations({
        expand: ["gateway"],
        filter: "tags: redirection flows: subscription"
    }).then(function(gateways) {
        //

    }, function(err) {
        // Couldn't fetch the project's gateways
    });

}, function(err) {
    // An error occured

});
```

```python
<%= partial "header-python" %>
# Let's first create an subscription
subscription = client.new_subscription().create({
    "customer_id": "cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P",
    "plan_id":     "silver-plan",

    expand:["project"]
})

# And now fetch the project's available gateways
gateways = subscription.project.fetchGatewayConfigurations({
    expand: ["gateway"],
    filter: "tags: redirection flows: subscription"
})
```

```ruby
<%= partial "header-ruby" %>
# Let's first create an subscription
subscription = client.subscription.create(
    customer_id: "cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P",
    plan_id:     "silver-plan",

    expand: ["project"]
)

# And now fetch the project's available gateways
gateways = subscription.project.fetch_gateway_configurations({
    expand: ["gateway"],
    filter: "tags: redirection flows: subscription"
})
```

```php
<%= partial "header-php" %>
// Let's first create an subscription
$subscription = $client->newSubscription()->create(array(
    "customer_id" => "cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P",
    "plan_id"     => "silver-plan",

    "expand" => array("project")
));

// And now fetch the project's available gateways
$gateways = $subscription->getProject()->fetchGatewayConfigurations(array(
    "expand" => array("gateway"),
    "filter" => "tags: redirection flows: subscription"
));
```

```go
<%= partial "header-go" %>
// Let's first create an subscription
sub, err := client.NewSubscription().Create(&processout.SubscriptionCreateParameters{
    Subscription: &processout.Subscription{
        CustomerID: processout.String("cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P"),
        PlanID:     processout.String("silver-plan"),
    },
    Options: &processout.Options{
        Expand: []string{"project"},
    }
}
if err != nil {
    panic(err)
}

// And now fetch the project available gateways for one-off payments
gateways, erri := sub.Project.FetchGatewayConfigurations(
    processout.Options{
        Expand: []string{"gateway"},
        Filter: "tags: redirection flows: subscription",
    })
```
</div>

## Display alternative methods payment links

The `gateways` variable fetched in the previous steps now contains all the
available alternative payment gateways that were configured and activated
on your project. We also created a new [`Subscription` &nearr;](/refs/#subscriptions) that we'll
use to redirect the customer to the payment page.

A payment link for an alternative payment gateway is as follows:

```html
<form action="/your-capture-endpoint" method="POST" id="payment-form">
  <!-- Loop through all your gateway configurations and display the link
       below.
       ProcessOut-checkout-domain/:subscription_id/redirect/:gateway_configuration_id -->
  <a href="https://checkout.processout.com/sub_SSpcwpKNSa2WT2pixBRNyOnCrftmJeqR/redirect/gway_conf_vMFNzz1GnWYRUJWFgUhn4HajCYmJiMsi"
    class="alternative-payment-link">

    Activate subscription!
  </a>
</form>
```

**Note**: The links are put in a form so that we can later post the `token`
representing the payment back to the merchant's backend.

## Hook ProcessOut.js on the payment links

We could technically stop there and simply redirect the customer to the checkout
pages, but the merchant would lose control over its customer checkout flow.
ProcessOut.js lets you control the redirection from your payment page so you can
cancel the payment at any time, and be notified synchronously of a new payment.

```html
<script src="https://js.processout.com/processout.js"></script>
<script type="text/javascript">
  document.addEventListener("DOMContentLoaded", function() {
    var client = new ProcessOut.ProcessOut("<%= partial "projectID" %>");
    // Let's hook every link:
    var formElement = document.getElementById("payment-form");
    var links = formElement.querySelectorAll(".alternative-payment-link");
    for(var i = 0; i < links.length; i++) {
      links[i].addEventListener("click", processoutRedirectHandler);
    }
  });
</script>
```

**Note**: Remember to replace the project ID in the example with your own. When testing,
prepend your project ID with `test-` like so: `test-<%= partial "projectID" %>`.

We also still have to add the handler, which we'll do just now:

## Handle the redirection

When a customer will click on the alternative gateway link, the `processoutRedirectHandler`
function will be called. Let's define it:

```javascript
function processoutRedirectHandler(e) {
  var el = e.target;
  // Prevent from doing the default redirection
  e.preventDefault();

  var action = client.handleAction(el.getAttribute("href"), 
    function(token) {
      // The customer completed the gateway payment flow,
      // we can send the token back to our backend to activate
      // the subscription
      var field   = document.createElement("input");
      field.type  = "hidden";
      field.name  = "token";
      field.value = token;
      formElement.submit();
    }, function(err) {
      // An error occured during checkout. This could just be the
      // customer that canceled the payment, or an error with
      // the payment gateway.
      alert(err);
    });

  return false;
}
```

## Handle the subscription activation on the server

`ProcessOut.js` sent the `token` back to our server so we need to finish
its activation. We'll need both the `token` and the `subscription ID` we created
earlier and used to redirect the customer.

The code to activate a subscription using a token returned by `ProcessOut.js` 
during an alternative gateway checkout is *identical* to the activation using 
a card token.

<div class="language-selector-wrapper">
<%= partial "lg-selector" %>
```shell
curl -X PUT https://api.processout.com/subscriptions/sub_SSpcwpKNSa2WT2pixBRNyOnCrftmJeqR \
    <%= partial "header-curl" %> \
    -d source="gway_req_V2UncmUgaGlyaW5nIQ=="
```

```javascript
<%= partial "header-js" %>
client.newSubscription().find("sub_SSpcwpKNSa2WT2pixBRNyOnCrftmJeqR").then(
    function(subscription) {
        subscription.save({
            source: "gway_req_V2UncmUgaGlyaW5nIQ=="
        }).then(
            function(subscription) {
                // The subscription is now active and will be automatically
                // charged

            }, function(err) {
                // An error occured
            });

    }, function(err) {
        // Could not find the subscription
    });
```

```python
<%= partial "header-python" %>
subscription = client.new_subscription().find("sub_SSpcwpKNSa2WT2pixBRNyOnCrftmJeqR")
subscription.save({
    "source": "gway_req_V2UncmUgaGlyaW5nIQ=="
})

# The subscription is now active and will be automatically charged
```

```ruby
<%= partial "header-ruby" %>
subscription = client.subscription.find("sub_SSpcwpKNSa2WT2pixBRNyOnCrftmJeqR")
subscription.save(
    source: "gway_req_V2UncmUgaGlyaW5nIQ=="
)

# The subscription is now active and will be automatically charged
```

```php
<%= partial "header-php" %>
$subscription = $client->newSubscription()->find("sub_SSpcwpKNSa2WT2pixBRNyOnCrftmJeqR");
$subscription->save(array(
    "source" => "gway_req_V2UncmUgaGlyaW5nIQ=="
))

// The subscription is now active and will be automatically charged
```

```go
<%= partial "header-go" %>
sub, _ := client.NewSubscription().Find("sub_SSpcwpKNSa2WT2pixBRNyOnCrftmJeqR")
sub, err := sub.Save(&processout.SubscriptionSaveParameters{
    Source: "gway_req_V2UncmUgaGlyaW5nIQ==",
})
if err != nil {
    panic(err)
}

// The customer is now successfully subscribed to the subscription
```
</div>

**Note**: The gateway request token sent by `ProcessOut.js` is actually only
an abstraction of the request done by the customer on the gateway. The content
of the token is therefore directly encoded inside it, in base64.

An error is thrown if the activation couldn't be made using the provided gateway
request token.
