---
title: Get started with subscriptions
---

## Get started with plans & subscriptions

Subscriptions are the best way to get recurring revenue from your customers. 
ProcessOut automatically handles the subscription lifecycles and does all
the maths for you with upgrades, downgrades and coupons.

<hr>

#### Payment modal

Before getting started, keep in mind that it's also possible to use the 
[payment modal &nearr;](/payments/payment-modal) to handle subscriptions.
Create a subscription using the API, or a plan directly on your Dashboard,
and use the subscription ID `sub_*` in the modal. The customer will be able
to chose among your available payment options, and pay directly in the modal.

#### Create a plan

The first step to start using subscriptions on ProcessOut is to create a plan
that your subscriptions will be based on. You can have as many plan as you
want, and they're a great way to track your sales related to your subscriptions
in your dashboard. Plans could be the different servers a hosting company
would sell for instance, or the different available thresholds for a SaaS service.

Let's get you started by creating a plan on your 
[Dashboard](https://dashboard.processout.com) &rsaquo; Subscriptions &rsaquo; Plans &rsaquo;
and create a new plan. You can assign the interval for your plan, which will
be the number of days between each iteration of the subscription (such as 30 days for
a monthly subscription), as well as a trial period if you want to offer your customers
with a way to test your service. A plan is typically composed of a unique ID that
you will define, a name, and an amount and currency.

It's also possible to create a [`Plan` &nearr;](/refs/#plans) using the API:

<div class="language-selector-wrapper">
<%= partial "lg-selector" %>
```shell
curl https://api.processout.com/plans \
    <%= partial "header-curl" %> \
    -d id="silver-plan" \
    -d name="Silver plan" \
    -d amount="10.00" \
    -d currency=USD \
    -d interval=1m
```

```javascript
<%= partial "header-js" %>
client.newPlan().create({
    id:       "silver-plan",
    name:     "Silver plan",
    amount:   "10.00",
    interval: "1m"
}).then(function(plan) {
    //

}, function(err) {
    // An error occured

});
```

```python
<%= partial "header-python" %>
plan = client.new_plan().create({
    "id":       "silver-plan",
    "name":     "Silver plan",
    "amount":   "10.00",
    "currency": "USD",
    "interval": "1m"
})
```

```ruby
<%= partial "header-ruby" %>
plan = client.plan.create(
    id:       "silver-plan",
    name:     "Silver plan",
    amount:   "10.00",
    currency: "USD",
    interval: "1m"
)
```

```php
<%= partial "header-php" %>
$plan = $client->newPlan()->create(array(
    "id"       => "silver-plan",
    "name"     => "Silver plan",
    "amount"   => "10.00",
    "currency" => "USD",
    "interval" => "1m"
));
```

```go
<%= partial "header-go" %>
plan, err := client.NewPlan().Create(&processout.PlanCreateParameters{
    Plan: &processout.Plan{
        ID:       processout.String("silver-plan"),
        Name:     processout.String("Silver plan"),
        Amount:   processout.String("10.00"),
        Currency: processout.String("USD"),
        Interval: processout.String("1m"),
    },
})
```
</div>

#### Create a subscription for your customer

Once you have created the plans you want, let's also create a customer object
on ProcessOut for each of your internal customers. ProcessOut customers are
used to link your customers with ProcessOut, and can be used to easily track
your sales in your [Dashboard](https://dashboard.processout.com). Let's create
a new [`Customer` &nearr;](/refs/#customers):

<div class="language-selector-wrapper">
<%= partial "lg-selector" %>
```shell
curl https://api.processout.com/customers \
    <%= partial "header-curl" %> \
    -d first_name=John \
    -d last_name=Smith
```

```javascript
<%= partial "header-js" %>
client.newCustomer().create({
    first_name: "John",
    last_name:  "Smith"
}).then(function(customer) {
    //

}, function(err) {
    // An error occured

});
```

```python
<%= partial "header-python" %>
customer = client.new_customer().create({
    "first_name": "John",
    "last_name":  "Smith"
})
```

```ruby
<%= partial "header-ruby" %>
customer = client.customer.create(
    first_name: "John",
    last_name:  "Smith"
)
```

```php
<%= partial "header-php" %>
$customer = $client->newCustomer()->create(array(
    "first_name": "John",
    "last_name":  "Smith"
));
```

```go
<%= partial "header-go" %>
cust, err := client.NewCustomer().Create(&processout.CustomerCreateParameters{
    Customer: &processout.Customer{
        FirstName: processout.String("John"),
        LastName:  processout.String("Smith"),
    },
})
```
</div>

Please note that while we're keeping the above example as simple as possible,
it is possible to store a lot more information about your customer, which can
be later searched on your [dashboard &nearr;](https://dashboard.processout.com)
as well. Find all the available customer attributes 
[in the API references &nearr;](/refs/).

Now that we have created a customer, you should store its ID in your application or
database and link it to the customer for which you created it. We can now
create a subscription for this customer from a plan you previously created.
In this example, we'll create a subscription using a dummy plan with an
ID `silver-plan`. This ID can be anything you used when creating your plans.

<div class="language-selector-wrapper">
<%= partial "lg-selector" %>
```shell
curl https://api.processout.com/subscriptions \
    <%= partial "header-curl" %> \
    -d customer_id=cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P \
    -d plan_id="silver-plan" \
    -d source=card_Tpu6ZOCDu1tnDKp0kTnPOcVDMUbW7dTU
```

```javascript
<%= partial "header-js" %>
// We can activate the subscription using a source, such as a card
// token previously generated using ProcessOut.js
client.newSubscription().create({
    customer_id: "cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P",
    plan_id:     "silver-plan",
    source:      "card_Tpu6ZOCDu1tnDKp0kTnPOcVDMUbW7dTU"
}).then(function(subscription) {
    // The customer was successfully subscribed to
    // the subscription

}, function(err) {
    // An error occured
});
```

```python
<%= partial "header-python" %>
# We can activate the subscription using a source, such as a card
# token previously generated using ProcessOut.js
subscription = client.new_subscription().create({
    "customer_id": "cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P",
    "plan_id":     "silver-plan",
    "source":      "card_Tpu6ZOCDu1tnDKp0kTnPOcVDMUbW7dTU"
})

# The customer is now successfully subscribed to the subscription
```

```ruby
<%= partial "header-ruby" %>
# We can activate the subscription using a source, such as a card
# token previously generated using ProcessOut.js
subscription = client.subscription.create(
    customer_id: "cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P",
    plan_id:     "silver-plan",
    source:      "card_Tpu6ZOCDu1tnDKp0kTnPOcVDMUbW7dTU"
)

# The customer is now successfully subscribed to the subscription
```

```php
<%= partial "header-php" %>
// We can activate the subscription using a source, such as a card
// token previously generated using ProcessOut.js
$subscription = $client->newSubscription()->create(array(
    "customer_id" => "cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P",
    "plan_id"     => "silver-plan",
    "source"      => "card_Tpu6ZOCDu1tnDKp0kTnPOcVDMUbW7dTU"
));

// The customer is now successfully subscribed to the subscription
```

```go
<%= partial "header-go" %>
// We can activate the subscription using a source, such as a card
// token previously generated using ProcessOut.js
sub, err := client.NewSubscription().Create(&processout.SubscriptionCreateParameters{
    Subscription: &processout.Subscription{
        CustomerID: processout.String("cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P"),
        PlanID:     processout.String("silver-plan"),
    },
    Source: "card_Tpu6ZOCDu1tnDKp0kTnPOcVDMUbW7dTU",
})

// The customer is now successfully subscribed to the subscription
```
</div>

#### Staying up to date

**Congrats!** Your customer is now successfully subscribed to a subscription,
and you will automatically be paid at each iteration of the subscription.

However, now that the subscription is fully set up you might want to handle
[events & webhooks &nearr;](/payments/handle-status-changes-webhooks) 
so you know when a customer cancels its subscription, or when a payment goes 
through or fails to be paid. You might also be interested in: 
[setting up trials &nearr;](/subscriptions/trials), 
[upgrades & downgrades &nearr;](/subscriptions/upgrades-and-downgrades), 
[cancelling a subscription &nearr;](/subscriptions/cancel-a-subscription), 
and [discounts & coupons &nearr;](/subscriptions/coupons-and-discounts).