---
title: Get started with subscriptions
---

## Get started with plans & subscriptions

Subscriptions are the best way get recurring revenue from your customers. 
ProcessOut automatically handles the subscription lifecycles and does all
the maths for you with upgrades, downgrades and coupons.

<hr>

#### Create a plan

The first step to start using subscriptions on ProcessOut is to create a plan
that your subscriptions will be based on. You can have as many plan as you
want, and they're a great way to track your sales related to your subscriptions
in your dashboard. Plans could be the different servers a hosting company
would sell for instance, or the different available thresholds for a SaaS service.

Let's get you started by creating a plan on your 
[Dashboard](https://dashboard.processout.com) &rsaquo; Subscriptions &rsaquo; Plans &rsaquo;
and create a new plan. You can assign the interval for your plan, which will
be the number of days between each iteration of the subscription (such as 30 days for
a monthly subscription), as well as a trial if you want to offer your customers
with a way to test your service. A plan is typically composed of a unique ID that
you will define, a name, and an amount and currency.

It's also possible to create a [`Plan` &nearr;](/refs/#plans) using the API:

<div class="language-selector-wrapper">
<%= partial "lg-selector" %>
```sh
curl https://api.processout.com/plans \
    -u proj_OvJdvN73Ds1pecfQez2J13pK1YlRqFh4:key-qiOniTQlt8OazoMrnYJKaSnBhRpWN5Rd \
    -d id="silver-plan" \
    -d name="Silver plan" \
    -d amount="10.00" \
    -d currency=USD \
    -d interval=1m
```

```javascript
<%= partial "header-js" %>
var plan = new ProcessOut.Plan();
plan.setId("silver-plan");
plan.setName("Silver plan");
plan.setAmount("10.00");
plan.setCurrency("USD");
plan.setInterval("1m");

plan.create().then(function(plan) {
    //

}, function(err) {
    // An error occured

});
```

```python
<%= partial "header-python" %>
plan = processout.Plan()
plan.id = "silver-plan"
plan.name = "Silver plan"
plan.amount = "10.00"
plan.currency = "USD"
plan.interval = "1m"

plan = plan.create()
```

```php
<%= partial "header-php" %>
$plan = new \ProcessOut\Plan();
$plan->setId("silver-plan");
$plan->setName("Silver plan");
$plan->setAmount("10.00");
$plan->setCurrency("USD");
$plan->setInterval("1m");

$plan = $plan->create();
```

```go
<%= partial "header-go" %>
plan, err := client.Plans.Create(&processout.Plan{
    ID:       "silver-plan",
    Name:     "Silver plan",
    Amount:   "10.00",
    Currency: "USD",
    Interval: "1m",
})
```
</div>

#### Create a subscription for your customer

Once you have created the plans you want, you will need to create a customer
on ProcessOut for each of your customers. ProcessOut customers are objects
used to link your customers with ProcessOut, and can be used to better track
your sales in your [Dashboard](https://dashboard.processout.com). Let's create
a new [`Customer` &nearr;](/refs/#customers):

<div class="language-selector-wrapper">
<%= partial "lg-selector" %>
```sh
curl https://api.processout.com/customers \
    -u proj_OvJdvN73Ds1pecfQez2J13pK1YlRqFh4:key-qiOniTQlt8OazoMrnYJKaSnBhRpWN5Rd \
    -d first_name=John \
    -d last_name=Smith
```

```javascript
<%= partial "header-js" %>
var customer = new ProcessOut.Customer();
customer.setFirstName("John");
customer.setLastName("Smith");

customer.create().then(function(customer) {
    //

}, function(err) {
    // An error occured

});
```

```python
<%= partial "header-python" %>
customer = processout.Customer()
customer.firstName = "John"
customer.lastName = "Smith"

customer = customer.create()
```

```php
<%= partial "header-php" %>
$customer = new \ProcessOut\Customer();
$customer->setFirstName("John");
$customer->setLastName("Smith");

$customer = $customer->create();
```

```go
<%= partial "header-go" %>
cust, err := client.Customers.Create(&processout.Customer{
    FirstName: "John",
    LastName:  "Smith",
})
```
</div>

Now that we have created a customer, you should store its ID in your application or
database and link it to the customer for which you created it. We can now
create a subscription for this customer from a plan you previously created.
In this example, we'll create a subscription using a dummy plan with an
ID `silver-plan`. This ID can be anything you used when creating your plans.

<div class="language-selector-wrapper">
<%= partial "lg-selector" %>
```sh
curl https://api.processout.com/subscriptions \
    -u proj_OvJdvN73Ds1pecfQez2J13pK1YlRqFh4:key-qiOniTQlt8OazoMrnYJKaSnBhRpWN5Rd \
    -d customer_id=cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P \
    -d plan_id="silver-plan" \
    -d source=card_Tpu6ZOCDu1tnDKp0kTnPOcVDMUbW7dTU
```

```javascript
<%= partial "header-js" %>
var subscription = new ProcessOut.Subscription();
subscription.createFromPlan("cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P",
    "silver-plan").then(function(subscription) {
        // The subscription is now successfully created
        // for the customer.
        // We can activate it using a source, such as a card
        // token previously generated using ProcessOut.js
        subscription.applySource("card_Tpu6ZOCDu1tnDKp0kTnPOcVDMUbW7dTU").then(
            function(subscription) {
                // The customer was successfully subscribed to
                // the subscription

            }, function(err) {
                // An error occured
            });

    }, function(err) {
        // An error occured

    });
```

```python
<%= partial "header-python" %>
subscription = processout.Subscription()
subscription = subscription.createFromPlan(
    "cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P", "silver-plan")

# The subscription is now successfully created
# for the customer.
# We can activate it using a source, such as a card
# token previously generated using ProcessOut.js
subscription.applySource("card_C4hZXQTU0aWoYeenHYC0DektYDqf8ocj")

# The customer is now successfully subscribed to the subscription
```

```php
<%= partial "header-php" %>
$subscription = new \ProcessOut\Subscription();
$subscription = $subscription->createFromPlan(
    "cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P", "silver-plan");

// The subscription is now successfully created
// for the customer.
// We can activate it using a source, such as a card
// token previously generated using ProcessOut.js
$subscription->applySource("card_C4hZXQTU0aWoYeenHYC0DektYDqf8ocj");

// The customer is now successfully subscribed to the subscription
```

```go
<%= partial "header-go" %>
sub, err := client.Subscriptions.CreateFromPlan(&processout.Subscription{}, 
    "cust_uYW5WVnjHe91qnsUA1sHOxEjdAySvg0P", "silver-plan")
if err != nil {
    panic(err)
}

// The subscription is now successfully created
// for the customer.
// We can activate it using a source, such as a card
// token previously generated using ProcessOut.js
sub, err = client.Subscriptions.ApplySource(sub, 
    "card_C4hZXQTU0aWoYeenHYC0DektYDqf8ocj")
if err != nil {
    panic(err)
}

// The customer is now successfully subscribed to the subscription
```
</div>

#### Staying up to date

**Congrats!** Your customer is now successfully subscribed to a subscription,
and you will automatically be paid at each iteration of the subscription.

However, now that the subscription is fully set up you might want to handle
[events & webhooks &nearr;](/payments/handle-status-changes-webhooks.html) 
so you know when a customer cancels its subscription, or when a payment goes 
through or fails to be paid. You might also be interested in: 
[setting up trials &nearr;](/subscriptions/trials.html), 
[upgrades & downgrades &nearr;](/subscriptions/upgrades-and-downgrades.html), 
[cancelling a subscription &nearr;](/subscriptions/cancel-a-subscription.html), 
and [discounts & coupons &nearr;](/subscriptions/coupons-and-discounts.html).